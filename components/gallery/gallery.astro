---
import MarkdownIt from "markdown-it";
import Lightbox from "@components/lightbox/lightbox.astro";
import { Image } from "astro:assets";

const md = new MarkdownIt({ html: true });

export interface Props {
  images: any[];
  height: number;
  columns: number;
  indent: boolean;
  lightbox?: boolean;
  key?: string;
}

const { images, height, indent, lightbox, key } = Astro.props;
// const imagePaths = images.map((i) => i.image);
const assets = await Astro.glob("/src/assets/**/*");

const imageAssets = images.map((img) => {
  const k = assets.findIndex((j) => j.default.src.includes(img.image));
  const i = Object.assign({}, img);
  if (k >= 0) i.image = assets[k].default;
  return i;
});

const columns = Astro.props.columns || images.length;
const id = `gallery${key}`;
---

<section
  {id}
  class={`gallery ${indent ? "" : "no-indent"}`}
  style={{ "--height": height, "--columns": columns }}
>
  {
    imageAssets.map((img, i) => (
      <figure class="gallery-item">
        <Image
          data-lightbox={`${id}-${i}`}
          src={img.image}
          alt=""
          height={512}
          width={512}
        />

        {(img.title || img.description) && (
          <figcaption>
            {img.title && <h3>{img.title}</h3>}
            {img.description && <div set:html={md.render(img.description)} />}
          </figcaption>
        )}
      </figure>
    ))
  }
  {
    lightbox && (
      <Lightbox collection={id}>
        {imageAssets.map((asset, i) => (
          <img
            src={asset.image?.src || asset.image}
            alt=""
            data-lightbox={`${id}-${i}`}
            loading="lazy"
            decoding="async"
            style={{
              ...(asset.image?.width && {
                "max-width": `${asset.image?.width}px`,
              }),
              ...(asset.image?.height && {
                "max-height": `${asset.image?.height}px`,
              }),
            }}
          />
        ))}
      </Lightbox>
    )
  }
</section>

<style lang="scss">
  section.gallery {
    grid-template-columns: repeat(var(--columns), 1fr);
  }

  .gallery {
    display: grid;
    grid-template-rows: 1fr;
    grid-auto-flow: row;
  }

  .gallery-item {
    position: relative;

    img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      object-position: center;
    }

    figcaption {
      position: absolute;
      display: flex;
      flex-direction: column;
      justify-content: flex-end;
      bottom: 0;
      left: 0;
      right: 0;
      padding: 2rem;
      background: linear-gradient(to right, #ffffffdd, #ffffff99);
    }
  }
</style>
