---
export interface Props {
  action?: string;
  method?: string;
  fields: object[];
  groupClass?: string;
}

const { action, method, fields, groupClass } = Astro.props;
const Container = action ? "form" : "div";
---

<Container
  id={action && "a"}
  action={action}
  method={action && (method || "POST")}
  enctype={action && "multipart/form-data"}
  class={groupClass}
>
  {
    fields.map((field) => (
      <>
        {field.fields ? (
          <>
            <label class={"group " + field.class} for={field.name}>
              {field.label}
            </label>
            <Astro.self
              groupClass={"group " + field.class + ""}
              fields={field.fields}
            />
          </>
        ) : (
          <div>
            <label for={field.name}>{field.label}</label>
            {field.type == "textarea" ? (
              <textarea name={field.name} required={field.required} />
            ) : (
              <input
                name={field.name}
                type={field.type}
                required={field.required}
              />
            )}
          </div>
        )}
      </>
    ))
  }
  {action && <input type="hidden" name="_captcha" />}
  {action && <button type="submit">Submit</button>}
</Container>

<style lang="scss">
  form {
    display: flex;
    flex-direction: column;
    gap: var(--text-gap);
  }

  label {
    display: block;
    margin: 0 0 5px 0;
    font-family: var(--bold-font-family);
    font-size: var(--text-size-small);
  }

  [type="text"],
  [type="email"],
  textarea {
    border: 1px solid rgb(var(--color-primary) / 0.4);
    width: 100%;
    padding: 5px 10px;
  }

  button {
    background: none;
    display: block;
    border: 2px solid rgb(var(--color-primary) / 0.4);
    border-radius: 5px;
    padding: 10px 16px;
    width: min-content;
    cursor: pointer;

    &:hover {
      background-color: rgb(var(--color-primary) / 0.1);
    }
  }
</style>
