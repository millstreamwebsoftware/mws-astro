---
import MarkdownIt from "markdown-it";
import "@glidejs/glide";
import "node_modules/@glidejs/glide/dist/css/glide.core.min.css";
const md = new MarkdownIt({ html: true });

export interface Props {
  slides: any[];
  height: number;
  gap: number;
  autoplay: number;
  perView: number;
  focusAtCenter: boolean;
  focusAt: number;
  bound: boolean;
  showBullets: boolean;
  showArrows: boolean;
  transition: string;
  animationDuration: number;
  indent: boolean;
  style: string[];
  key?: string;
}

// @ts-expect-error TS2304
const ENV_EDITOR: boolean = ENV_BOOKSHOP_LIVE || false;

const {
  key,
  showBullets,
  showArrows,
  transition,
  height,
  perView,
  indent,
  bound,
  gap,
  autoplay,
  animationDuration,
  focusAt,
  focusAtCenter,
  style,
} = Astro.props;
const id = "glide" + "-" + (key || "");
const slides = Astro.props.slides || [];

type glideOptionsType = Record<string, string | number | boolean | undefined>;

const glideOptions: glideOptionsType = {
  glide: ENV_EDITOR ? undefined : id,
  sliderType: transition.toLowerCase(),
  autoplay: autoplay * 1000, // Seconds -> Milliseconds
  animationDuration: animationDuration * 1000, // Seconds -> Milliseconds
  focus: focusAtCenter ? "center" : focusAt,
  gap,
  perView,
  bound,
};

if (glideOptions.sliderType == "fader") {
  glideOptions.perView = 1;
  glideOptions.focus = 0;
  glideOptions.animationDuration = 0;
}

if (ENV_EDITOR) glideOptions.sliderType = "slider";

// Convert glideOptions to data-* attributes like DOMStringMap
const dataGlideOptions = Object.entries(glideOptions).reduce(
  (obj: glideOptionsType, [k, v]) => {
    obj[`data-${k.replaceAll(/[A-Z]/g, "-$&").toLowerCase()}`] = v;
    return obj;
  },
  {}
);
---

<section
  class:list={["slider", { ENV_EDITOR }, style]}
  style={(animationDuration
    ? `--transition: ${animationDuration * 1000}ms;`
    : "") + (indent ? "" : "--indent: 0;")}
>
  <>
    {
      ENV_EDITOR && (
        <>
          {slides.map((slide, i) => (
            <>
              <input
                type="radio"
                id={id + "_" + i}
                name={id}
                checked={i == 0 ? "checked" : undefined}
              />
            </>
          ))}
          <div class="editor__buttons">
            {slides.map((slide, i) => (
              <label for={id + "_" + i}>{i}</label>
            ))}
          </div>
        </>
      )
    }

    <div class="glide" {id} {...dataGlideOptions}>
      <div
        class="glide__track"
        data-glide-el="track"
        style={height ? `--height:${height}vh;` : ""}
      >
        <ul class="glide__slides">
          {
            slides.map((slide, i) => (
              <>
                <li
                  class:list={["glide__slide"]}
                  style={
                    (slide.background_color
                      ? `--background-color: ${slide.background_color};`
                      : "") +
                    (slide.background_image
                      ? `--background-image: url("${slide.background_image}");`
                      : "")
                  }
                  set:html={slide.content ? md.render(slide.content) : ""}
                />
              </>
            ))
          }
        </ul>
      </div>
      {
        showArrows && (
          <div class="glide__arrows" data-glide-el="controls">
            <button class="glide__arrow glide__arrow--left" data-glide-dir="<">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="32"
                height="32"
                viewBox="0 0 32 32"
              >
                <path
                  fill="currentColor"
                  d="M10 16L20 6l1.4 1.4l-8.6 8.6l8.6 8.6L20 26z"
                />
              </svg>
            </button>
            <button class="glide__arrow glide__arrow--right" data-glide-dir=">">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="32"
                height="32"
                viewBox="0 0 32 32"
              >
                <path
                  fill="currentColor"
                  d="M22 16L12 26l-1.4-1.4l8.6-8.6l-8.6-8.6L12 6z"
                />
              </svg>
            </button>
          </div>
        )
      }
      {
        showBullets && (
          <div class="glide__bullets" data-glide-el="controls[nav]">
            {slides.map((slide, i) => (
              <button class="glide__bullet" data-glide-dir={`=${i}`} />
            ))}
          </div>
        )
      }
    </div>
  </>
</section>

<script>
  import Glide from "@glidejs/glide";

  console.log("test");

  document.querySelectorAll("div[data-glide]").forEach((e, i) => {
    if (!(e instanceof HTMLElement)) return;

    if (!e.matches(".ENV_EDITOR *")) {
      const id = e.getAttribute("id");

      const glideOptions: Partial<Glide.Options> = {
        autoplay: Number(e.dataset?.autoplay) || false,
        focusAt:
          e.dataset?.focusAt == "center"
            ? "center"
            : Number(e.dataset?.focus) || 0,
        bound: Boolean(e.dataset?.bound) || undefined,
        gap: Number(e.dataset?.gap) || 0,
        type:
          e.dataset?.sliderType?.toLowerCase() == "carousel"
            ? "carousel"
            : "slider",
        perView: Number(e.dataset?.perView) || undefined,
        animationDuration: Number(e.dataset?.animationDuration) || 0,
      };

      new Glide(`#${id}`, glideOptions).mount();
    }
  });
</script>
