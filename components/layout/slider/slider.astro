---
import MarkdownIt from "markdown-it";
const md = new MarkdownIt({ html: true });

export interface Props {
  slides: any[];
  key?: string;
}

const envEditor =
  true ||
  !(
    // @ts-expect-error TS2304
    (typeof ENV_BOOKSHOP_LIVE == "boolean" && !ENV_BOOKSHOP_LIVE)
  );

const { key } = Astro.props;
const id = "glide" + "-" + (key || "");
// const glideId = envEditor ? undefined : id;
const slides = Astro.props.slides || [];

const fader = false;

// const htmlContent = content ? md.render(content) : "";

// const autoplay = true;

// {
//         slides.map((slide, i) => {
//           return slide;
//         })
//       }

// const slides = [];
// slides[0] = { text: 0 };
// slides[1] = { text: 1 };
// slides[2] = { text: 2 };
// slides[3] = { text: 3 };

//           <label for={id + "_" + i}>{i}</label>
---

<section class:list={["slider", { envEditor, fader }]}>
  <>
    {
      envEditor &&
        slides.map((slide, i) => (
          <>
            <input
              type="radio"
              id={id + "_" + i}
              name={id}
              checked={i == 0 ? "checked" : undefined}
            />
            <label for={id + "_" + i}>{i}</label>
          </>
        ))
    }

    <div class="glide" data-glide={id} {id}>
      <div class="glide__track" data-glide-el="track">
        <ul class="glide__slides">
          {
            slides.map((slide, i) => (
              <>
                <li
                  class:list={[
                    "glide__slide",
                    { editor__selected: envEditor && i == 0 },
                  ]}
                  style={
                    (slide.background_color
                      ? `--background-color: ${slide.background_color};`
                      : "") +
                    (slide.background_image
                      ? `--background-image: url("${slide.background_image}");`
                      : "")
                  }
                  set:html={slide.content ? md.render(slide.content) : ""}
                />
              </>
            ))
          }
        </ul>
      </div>
      <div class="glide__arrows" data-glide-el="controls">
        <button class="glide__arrow glide__arrow--left" data-glide-dir="<">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="32"
            height="32"
            viewBox="0 0 32 32"
            ><path
              fill="currentColor"
              d="M10 16L20 6l1.4 1.4l-8.6 8.6l8.6 8.6L20 26z"></path></svg
          >
        </button>
        <button class="glide__arrow glide__arrow--right" data-glide-dir=">">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="32"
            height="32"
            viewBox="0 0 32 32"
            ><path
              fill="currentColor"
              d="M22 16L12 26l-1.4-1.4l8.6-8.6l-8.6-8.6L12 6z"></path></svg
          >
        </button>
      </div>
      <div class="glide__bullets" data-glide-el="controls[nav]">
        {
          slides.map((slide, i) => (
            <button class="glide__bullet" data-glide-dir={`=${i}`} />
          ))
        }
      </div>
    </div>
  </>
</section>

<style>
  /* .glide__slides .glide__slide {
    display: none;
  }
  input:checked + .glide__slide {
    display: block;
  }

  label {
    padding: 1rem;
  }

  label:target {
    color: red;
  } */
</style>

<style lang="scss">
  $arrowSize: 3rem;
  $bulletSize: 1rem;

  // @for $i from 1 to 10 {
  //   input:nth-of-type(#{$i}):checked ~ .glide li:nth-of-type(#{$i}) {
  //     display: block;
  //   }
  // }

  .envEditor {
    .glide__slide {
      display: none;
    }

    .glide__slide.editor__selected {
      display: block;
    }

    input {
      display: none;
    }

    label {
      background-color: rgb(235, 255, 255);
      padding: 0.5rem 1rem;
      transition: background-color 0.2s ease-in-out;

      &:hover {
        background-color: rgb(163, 238, 255);
      }
    }

    input:checked + label {
      background-color: rgb(82, 223, 255);
    }

    .glide__arrows,
    .glide__bullets {
      opacity: 0.5;
      transition: opacity 0.4s ease-in-out;
    }

    :hover .glide__arrows,
    :hover .glide__bullets {
      // opacity: 0;
    }
  }

  .glide__slide {
    background-color: var(--background-color);
    background-image: var(--background-image);

    background-position: center;
    background-size: cover;

    padding: 4rem;
  }

  .glide__arrows {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;

    .glide__arrow {
      position: absolute;
      top: calc(50% - $arrowSize * 0.5);
      height: $arrowSize;
      width: $arrowSize;
      border: none;
      background-color: #00000033;
      border-radius: $arrowSize;
      backdrop-filter: blur(2px);
    }

    .glide__arrow--left {
      left: 1rem;
    }

    .glide__arrow--right {
      right: 1rem;
    }

    .glide__arrow svg {
      color: white;
      position: absolute;
      inset: 0;
      width: 100%;
      height: 100%;
      // filter: drop-shadow(0 0 0.2rem #000000aa);
    }
  }

  .glide__bullets {
    position: absolute;
    bottom: 0.8rem;
    left: 0;
    right: 0;
    display: flex;
    flex-direction: row;

    justify-content: center;
    gap: 1rem;
  }

  .glide__bullet {
    border: none;
    padding: 0;
    height: $bulletSize * 0.5;
    width: $bulletSize;
    border-radius: 0.5rem;
    background-color: #dddddd;
    box-shadow: 0 0 0.2rem #00000011;
    transition: background-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;

    &--active {
      background-color: white;
      box-shadow: 0 0 0.2rem #00000044;
    }
  }

  .fader {
    .glide__slides {
      transform: translate3d(0, 0, 0) !important;
    }

    .glide__slide {
      position: absolute;
      top: 0;
      left: 0;
      order: 2;
      opacity: 0;
      transition: opacity 1250ms ease-in-out;
    }

    .glide__slide.glide__slide--active {
      position: relative;
      order: 1;
      opacity: 1;
      z-index: 1;
    }
  }
</style>

<script>
  import Glide from "@glidejs/glide";

  // if (!window.hasOwnProperty("inEditorMode") || !(window as any).inEditorMode) {
  document.querySelectorAll("div[data-glide]").forEach((e, i) => {
    if (!e) return;

    if (!e.matches(".envEditor *")) {
      let id = e.getAttribute("id");

      new Glide(`#${id}`, {
        autoplay: 4000,
        focusAt: "center",
        gap: 0,
      }).mount();
    } else {
      const editorSelected = "editor__selected";
      const sliderRoot = e.closest(".glide");

      if (!sliderRoot) return;

      sliderRoot
        .querySelectorAll("button[data-glide-dir]")
        .forEach((button, i) => {
          console.log(button);
          button.addEventListener(
            "click",
            (c) => {
              if (!c.currentTarget) return;
              const target = c.currentTarget as HTMLButtonElement;
              const slideOperation = target.getAttribute("data-glide-dir");
              if (!slideOperation) return;
              const slider = target.closest(".glide");
              const slides = slider?.querySelectorAll(".glide__slide");
              if (!slides) return;
              const numSlides = slides.length;
              const currentSlide = Array.from(slides).findIndex((element) =>
                element.matches("." + editorSelected)
              );
              if (currentSlide < 0) return;

              let newSlide;
              if (slideOperation.startsWith("=")) {
                newSlide = Number(slideOperation.replace("=", ""));
              } else {
                newSlide =
                  (currentSlide + (slideOperation.startsWith("<") ? -1 : 1)) %
                  numSlides;
              }
              if (typeof newSlide == "undefined") return;
              if (newSlide < 0) {
                newSlide = numSlides + newSlide;
              }

              if (currentSlide != newSlide) {
                slides[currentSlide].classList.remove(editorSelected);
                slides[newSlide].classList.add(editorSelected);
                console.log(slides[newSlide]);
              }
            },
            { passive: true }
          );
        });
    }
  });
  // }
</script>
