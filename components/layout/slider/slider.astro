---
import MarkdownIt from "markdown-it";
const md = new MarkdownIt({ html: true });

export interface Props {
  slides: any[];
  key?: string;
}

const envEditor =
  true ||
  !(
    // @ts-expect-error TS2304
    (typeof ENV_BOOKSHOP_LIVE == "boolean" && !ENV_BOOKSHOP_LIVE)
  );

const { key } = Astro.props;
const id = "glide" + "-" + (key || "");
const slides = Astro.props.slides || [];

// const htmlContent = content ? md.render(content) : "";

// const autoplay = true;

// {
//         slides.map((slide, i) => {
//           return slide;
//         })
//       }

// const slides = [];
// slides[0] = { text: 0 };
// slides[1] = { text: 1 };
// slides[2] = { text: 2 };
// slides[3] = { text: 3 };

//           <label for={id + "_" + i}>{i}</label>
---

{
  envEditor ? (
    <section class="slider">
      {slides.map((slide, i) => (
        <>
          <input
            type="radio"
            id={id + "_" + i}
            name={id}
            checked={i == 0 ? "checked" : undefined}
          />
          <label for={id + "_" + i}>{i}</label>
        </>
      ))}

      <div class="glide" {id}>
        <div class="glide__track" data-glide-el="track">
          <ul class="glide__slides">
            {slides.map((slide, i) => (
              <>
                <li
                  class="glide__slide"
                  set:html={slide.content ? md.render(slide.content) : ""}
                />
              </>
            ))}
          </ul>
        </div>
      </div>
    </section>
  ) : (
    <section class="slider">
      <div class="glide" data-glide={id} {id}>
        <div class="glide__track" data-glide-el="track">
          <ul class="glide__slides">
            {slides.map((slide, i) => (
              <li class="glide__slide">{slide.text}</li>
            ))}
          </ul>
        </div>
        <div class="glide__arrows" data-glide-el="controls">
          <button class="glide__arrow glide__arrow--left" data-glide-dir="<">
            prev
          </button>
          <button class="glide__arrow glide__arrow--right" data-glide-dir=">">
            next
          </button>
        </div>
        <div class="glide__bullets" data-glide-el="controls[nav]">
          {slides.map((slide, i) => (
            <button class="glide__bullet" data-glide-dir={`=${i}`} />
          ))}
        </div>
      </div>
    </section>
  )
}

<style>
  /* .glide__slides .glide__slide {
    display: none;
  }
  input:checked + .glide__slide {
    display: block;
  }

  label {
    padding: 1rem;
  }

  label:target {
    color: red;
  } */
</style>

<style lang="scss">
  @for $i from 1 to 10 {
    input:nth-of-type(#{$i}):checked ~ .glide li:nth-of-type(#{$i}) {
      display: block;
      // background-color: red;
    }
  }

  .glide__slide {
    display: none;
  }

  input {
    display: none;
  }

  label {
    background-color: rgb(235, 255, 255);
    padding: 0.5rem 1rem;
    transition: background-color 0.2s ease-in-out;

    &:hover {
      background-color: rgb(163, 238, 255);
    }
  }

  input:checked + label {
    background-color: rgb(82, 223, 255);
  }
</style>

<script>
  import Glide from "@glidejs/glide";

  if (!window.hasOwnProperty("inEditorMode") || !(window as any).inEditorMode) {
    document.querySelectorAll("div[data-glide]").forEach((e, i) => {
      if (!e) {
        return;
      }

      let id = e.getAttribute("id");

      new Glide(`#${id}`, {
        autoplay: 4000,
        focusAt: "center",
      }).mount();
    });
  }
</script>
