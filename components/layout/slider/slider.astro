---
import MarkdownIt from "markdown-it";
const md = new MarkdownIt({ html: true });

export interface Props {
  slides: any[];
  height: number;
  gap: number;
  autoplay: number;
  perView: number;
  focusAtCenter: boolean;
  focusAt: number;
  bound: boolean;
  showBullets: boolean;
  showArrows: boolean;
  transition: string;
  animationDuration: number;
  indent: boolean;
  style: string[];
  key?: string;
}

const envEditor =
  false ||
  !(
    // @ts-expect-error TS2304
    (typeof ENV_BOOKSHOP_LIVE == "boolean" && !ENV_BOOKSHOP_LIVE)
  );

const {
  key,
  showBullets,
  showArrows,
  transition,
  height,
  perView,
  indent,
  bound,
  gap,
  autoplay,
  animationDuration,
  focusAt,
  focusAtCenter,
  style,
} = Astro.props;
const id = "glide" + "-" + (key || "");
const slides = Astro.props.slides || [];

type glideOptionsType = Record<string, string | number | boolean | undefined>;

const glideOptions: glideOptionsType = {
  glide: envEditor ? undefined : id,
  sliderType: transition.toLowerCase(),
  autoplay: autoplay * 1000, // Seconds -> Milliseconds
  animationDuration: animationDuration * 1000, // Seconds -> Milliseconds
  focus: focusAtCenter ? "center" : focusAt,
  gap,
  perView,
  bound,
};

if (glideOptions.sliderType == "fader") {
  glideOptions.perView = 1;
  glideOptions.focusAt = 0;
  glideOptions.animationDuration = 0;
}

if (envEditor) glideOptions.sliderType = "slider";

const dataGlideOptions = Object.entries(glideOptions).reduce(
  (obj: glideOptionsType, [k, v]) => {
    obj[`data-${k.toLowerCase()}`] = v;
    return obj;
  },
  {}
);
---

<section
  class:list={["slider", { envEditor }, style]}
  style={(animationDuration
    ? `--transition: ${animationDuration * 1000}ms;`
    : "") + (indent ? "" : "--indent: 0;")}
>
  <>
    {
      envEditor && (
        <>
          {slides.map((slide, i) => (
            <>
              <input
                type="radio"
                id={id + "_" + i}
                name={id}
                checked={i == 0 ? "checked" : undefined}
              />
            </>
          ))}
          <div class="editor__buttons">
            {slides.map((slide, i) => (
              <label for={id + "_" + i}>{i}</label>
            ))}
          </div>
        </>
      )
    }

    <div class="glide" {id} {...dataGlideOptions}>
      <div
        class="glide__track"
        data-glide-el="track"
        style={height ? `--height:${height}vh;` : ""}
      >
        <ul class="glide__slides">
          {
            slides.map((slide, i) => (
              <>
                <li
                  class:list={["glide__slide"]}
                  style={
                    (slide.background_color
                      ? `--background-color: ${slide.background_color};`
                      : "") +
                    (slide.background_image
                      ? `--background-image: url("${slide.background_image}");`
                      : "")
                  }
                  set:html={slide.content ? md.render(slide.content) : ""}
                />
              </>
            ))
          }
        </ul>
      </div>
      {
        showArrows && (
          <div class="glide__arrows" data-glide-el="controls">
            <button class="glide__arrow glide__arrow--left" data-glide-dir="<">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="32"
                height="32"
                viewBox="0 0 32 32"
              >
                <path
                  fill="currentColor"
                  d="M10 16L20 6l1.4 1.4l-8.6 8.6l8.6 8.6L20 26z"
                />
              </svg>
            </button>
            <button class="glide__arrow glide__arrow--right" data-glide-dir=">">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="32"
                height="32"
                viewBox="0 0 32 32"
              >
                <path
                  fill="currentColor"
                  d="M22 16L12 26l-1.4-1.4l8.6-8.6l-8.6-8.6L12 6z"
                />
              </svg>
            </button>
          </div>
        )
      }
      {
        showBullets && (
          <div class="glide__bullets" data-glide-el="controls[nav]">
            {slides.map((slide, i) => (
              <button class="glide__bullet" data-glide-dir={`=${i}`} />
            ))}
          </div>
        )
      }
    </div>
  </>
</section>

<style lang="scss">
  $arrowSize: 3rem;
  $bulletSize: 1rem;

  @for $i from 1 to 20 {
    input:nth-of-type(#{$i}):checked ~ .glide li:nth-of-type(#{$i}) {
      display: block;
    }
    input:nth-of-type(#{$i}):checked
      ~ .editor__buttons
      label:nth-of-type(#{$i}) {
      background-color: rgb(82, 223, 255);
    }
  }

  .envEditor {
    position: relative;

    .glide__slide {
      display: none;
    }

    input {
      display: none;
    }

    label {
      background-color: rgb(235, 255, 255);
      // padding: 0.5rem 1rem;
      height: 100%;
      padding: 0 1rem;
      transition: background-color 0.2s ease-in-out;

      &:hover {
        background-color: rgb(163, 238, 255);
      }
    }

    input:checked + label {
      background-color: rgb(82, 223, 255);
    }

    .glide__arrows,
    .glide__bullets {
      opacity: 0.5;
      transition: opacity 0.4s ease-in-out;
    }

    :hover .glide__arrows,
    :hover .glide__bullets {
      opacity: 0;
    }

    .editor__buttons {
      height: 3rem;
      display: flex;
      position: absolute;
      top: 0;
      left: 0;
      z-index: 1000;
    }
  }

  .glide__slides {
    height: var(--height);
  }

  .glide__slide {
    background-color: var(--background-color);
    background-image: var(--background-image);

    background-position: center;
    background-size: cover;

    padding: 4rem;
    height: 100%;
  }

  .glide__arrows {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;

    .glide__arrow {
      position: absolute;
      top: calc(50% - $arrowSize * 0.5);
      height: $arrowSize;
      width: $arrowSize;
      border: none;
      background-color: #00000033;
      border-radius: $arrowSize;
      backdrop-filter: blur(2px);
    }

    .glide__arrow--left {
      left: 1rem;
    }

    .glide__arrow--right {
      right: 1rem;
    }

    .glide__arrow svg {
      color: white;
      position: absolute;
      inset: 0;
      width: 100%;
      height: 100%;
      // filter: drop-shadow(0 0 0.2rem #000000aa);
    }
  }

  .glide__bullets {
    position: absolute;
    bottom: 0.8rem;
    left: 0;
    right: 0;
    display: flex;
    flex-direction: row;

    justify-content: center;
    gap: 1rem;
  }

  .glide__bullet {
    border: none;
    padding: 0;
    height: $bulletSize * 0.5;
    width: $bulletSize;
    border-radius: 0.5rem;
    background-color: #dddddd;
    box-shadow: 0 0 0.2rem #00000011;
    transition: background-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;

    &--active {
      background-color: white;
      box-shadow: 0 0 0.2rem #00000044;
    }
  }

  div[data-slidertype="fader"] {
    .glide__slides {
      transform: translate3d(0, 0, 0) !important;
    }

    .glide__slide:first-child {
      animation-name: startOpaque;
      animation-duration: var(--transition);
      animation-iteration-count: 1;
    }

    .glide__slide {
      position: absolute;
      top: 0;
      left: 0;
      order: 2;
      opacity: 0;
      transition: opacity var(--transition) ease-in-out;
    }

    .glide__slide.glide__slide--active {
      position: relative;
      order: 1;
      opacity: 1;
      z-index: 1;
    }

    @keyframes startOpaque {
      0% {
        opacity: 1;
      }
      100% {
        opacity: 1;
      }
    }
  }
</style>

<script>
  import Glide from "@glidejs/glide";

  document.querySelectorAll("div[data-glide]").forEach((e, i) => {
    if (!e) return;

    if (!e.matches(".envEditor *")) {
      const id = e.getAttribute("id");

      const glideOptions: Partial<Glide.Options> = {
        autoplay: Number(e.getAttribute("data-autoplay")) || false,
        focusAt:
          e.getAttribute("data-focus") == "center"
            ? "center"
            : Number(e.getAttribute("data-focus")) || 0,
        bound: Boolean(e.getAttribute("data-bound")) || undefined,
        gap: Number(e.getAttribute("data-gap")) || 0,
        type:
          e.getAttribute("data-slidertype")?.toLowerCase() == "carousel"
            ? "carousel"
            : "slider",
        perView: Number(e.getAttribute("data-perview")) || undefined,
        animationDuration:
          Number(e.getAttribute("data-animationDuration")) || undefined,
      };

      new Glide(`#${id}`, glideOptions).mount();
    }
  });
</script>
