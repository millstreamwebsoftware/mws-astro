---
export interface Props {
  content_blocks: any[];
  key?: string;
}

const { key } = Astro.props;
const contentBlocks = Astro.props.content_blocks;

const components: Record<string, any> = {};
const componentImports = import.meta.glob(
  ["/src/components/**/*.jsx", "/src/components/**/*.astro"],
  {
    eager: true,
  }
);

Object.entries(componentImports).forEach(([path, obj]: [string, any]) => {
  const parts = path
    .replace(/^.*components\//, "")
    .split(".")[0]
    .split("/");
  if (parts.length > 1 && parts[parts.length - 1] === parts[parts.length - 2]) {
    parts.pop();
  }
  const bookshopName = parts.join("/");
  components[bookshopName] = obj.default;
});
---

<div class="columns" style={{ "--column-count": contentBlocks.length }}>
  {
    contentBlocks.map((block: any, i: any) => {
      const Component = components[block._bookshop_name];
      if (Component) {
        return <Component {...block} key={String(i) + (key || "")} />;
      }
      return (
        <div class="missing-component">
          {`Component ${block._bookshop_name} could not be found!`}
        </div>
      );
    })
  }
</div>

<style lang="scss">
  .columns {
    // column-gap: var(--column-gap);
    display: grid;
    grid-auto-flow: column;
    grid-template-columns: repeat(var(--column-count), 1fr);
  }
</style>
