---
import preferences from "data/preferences.json";

export interface Props {
  pages?: any;
  id?: string;
  depth?: number;
  currentPath?: string;
  paths?: any[];
}

interface PageTree {
  children?: any;
  parent: PageTree | undefined;
  title?: string;
  slug?: string;
  id?: string;
  selected?: number;
}

function makeTree(pages: any, currentPath?: string) {
  const pageTree: PageTree = {
    children: {},
    parent: undefined,
    selected: 0,
  };

  const filteredPages = pages.filter(
    (page: any) => page.props.page.data.status === "online"
  );

  const sortedPages = filteredPages.sort(
    (a: any, b: any) =>
      (a.params.slug?.split("/").length || 0) -
        (b.params.slug?.split("/").length || 0) ||
      a.props.page.data.order - b.props.page.data.order
  );

  sortedPages.forEach((page: any) => {
    let path = page.params.slug?.replace(/\/?index$/, "").split("/") || [""];

    let cursor = pageTree;
    let selected = Number(page.params.slug === currentPath);

    for (var i = 0; i < path.length; i++) {
      if (!("children" in cursor)) {
        cursor.children = {};
      }

      if (!(path[i] in cursor?.children)) {
        cursor.children[path[i]] = {
          parent: undefined,
          title: path[i]
            .replaceAll("-", " ")
            .replace(
              /\w\S*/g,
              (t: string) =>
                t.charAt(0).toUpperCase() + t.substring(1).toLowerCase()
            ),
          selected,
        };
      }

      cursor.selected = selected;

      cursor = cursor.children[path[i]];

      if (i + 1 == path.length) {
        cursor.selected = cursor.selected ? 2 : 0;
        cursor.id = page.props.page.id;
        cursor.slug = page.params.slug || "";
        Object.assign(cursor, page.props.page.data);
      }
    }
  });

  return pageTree;
}

const { id } = Astro.props;
const depth = typeof Astro.props.depth === "number" ? ++Astro.props.depth : 0;
const pages =
  typeof Astro.props.pages === "undefined"
    ? makeTree(Astro.props.paths, Astro.props.currentPath)
    : Astro.props.pages;

const Wrapper = depth ? Fragment : "nav";

// {!depth && <Debug {pages} />}
---

<Wrapper>
  <ul class:list={[`depth-${depth}`]}>
    {
      "children" in pages &&
        Object.values(pages.children).map((page: any, i) => (
          <li
            tabindex="0"
            class:list={[
              {
                active: page.selected,
                selected: page.selected === 2,
                children: "children" in page,
              },
              `depth-${depth}`,
            ]}
          >
            <a
              aria-selected={page.selected === 2 ? "true" : "false"}
              href={
                typeof page?.slug !== "undefined"
                  ? `/${page.slug.replace(/index$/, "")}`
                  : undefined
              }
            >
              {page?.title}
            </a>
            {"children" in page && <Astro.self depth={depth} pages={page} />}
          </li>
        ))
    }
  </ul>
</Wrapper>

<script>
  import {
    computePosition,
    ComputePositionConfig,
    autoUpdate,
    offset,
    shift,
    flip,
  } from "@floating-ui/dom";
  import hoverintent from "hoverintent";

  // TODO: Replace individual event listeners with a single event listener
  // TODO: Mobile Navigation

  const anchors = document.querySelectorAll("nav li");

  const popin = function (this: HTMLElement, e: Event) {
    const anchor = this;
    const dropdown = anchor.querySelector("ul");
    if (!dropdown) return;
    dropdown.classList.add("dropdown-open");
    const options: ComputePositionConfig = anchor.matches(".depth-0")
      ? {
          placement: "bottom-start",
          middleware: [shift(), offset({ crossAxis: 0 })],
        }
      : {
          placement: "right-start",
          middleware: [flip(), offset({ mainAxis: 0, crossAxis: 0 })],
        };

    // @ts-ignore
    anchor.cleanup = autoUpdate(anchor, dropdown, () => {
      computePosition(anchor, dropdown, options).then(({ x, y }) => {
        Object.assign(dropdown.style, {
          left: `${x}px`,
          top: `${y}px`,
        });
      });
    });
  };

  const popout = function (this: HTMLElement, e: Event) {
    const anchor = this;
    if (
      "relatedTarget" in e &&
      e.relatedTarget instanceof Node &&
      anchor.contains(e.relatedTarget)
    ) {
      return;
    }
    const dropdown = anchor.querySelector("ul");
    if (!dropdown) {
      return;
    }
    dropdown.classList.remove("dropdown-open");
    if ("cleanup" in anchor && anchor.cleanup instanceof Function) {
      anchor.cleanup();
    }
  };

  anchors.forEach((anchor) => {
    hoverintent(anchor, popin, popout).options({
      handleFocus: true,
    });
  });
</script>

<style>
  nav {
    z-index: 999;
  }

  .logo {
    grid-area: logo;
  }

  ul.depth-0 {
    grid-area: navigation;
    display: flex;
    flex-direction: row;
    justify-content: flex-end;
    margin-right: 4rem;
    height: 100%;

    /* gap: 2rem; */
  }

  li.depth-0 {
    display: flex;
    position: relative;
    flex-direction: column;
    justify-content: center;
    align-items: center;
  }

  li.depth-0 > a {
    padding: 20px;
    color: rgb(var(--header-color));
  }

  li.depth-0.children::after {
    content: "";
    position: absolute;
    bottom: 5px;
    left: calc(50% - 3px);
    width: 6px;
    height: 6px;
    border-radius: 1rem;
    background-color: #eee;
  }

  ul {
    list-style-type: none;
    padding: 0;
  }

  .depth-0 ul {
    position: absolute;
    width: max-content;
    top: 0;
    left: 0;
    background-color: white;
    display: none;
  }

  .depth-1 li {
    width: max-content;
    box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.2);
  }

  .depth-1 a {
    padding: 10px 20px;
  }

  .depth-0 ul:not(ul.dropdown-open) {
    display: none;
  }

  ul.dropdown-open {
    display: block;
  }

  /* .active {
    background-color: #eee;
  } */

  /* .selected {
    background-color: #ddd;
  } */

  .active > a {
    font-weight: bold;
  }

  a {
    display: block;
    text-decoration: none;
    color: rgb(0 0 0);
    cursor: default;
    transition: background-color 0.2s ease-in-out;
  }

  a:hover {
    background-color: rgba(0, 0, 0, 0.1);
  }

  a[href] {
    cursor: pointer;
  }

  a[href]:hover {
    background-color: rgba(0, 0, 0, 0.15);
  }
</style>
