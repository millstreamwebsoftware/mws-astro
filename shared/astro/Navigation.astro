---
import preferences from "data/preferences.json";
// import { getCollection } from "astro:content";
import { Debug } from "astro/components";

export interface Props {
  pages?: any;
  id?: string;
  depth?: number;
  currentPath?: string;
  paths?: any[];
}

interface PageTree {
  children?: any;
  parent: PageTree | undefined;
  title?: string;
  slug?: string;
  id?: string;
}

function makeTree(pages: any) {
  const pageTree: PageTree = { children: {}, parent: undefined };

  pages.forEach((page: any) => {
    let path = page.params.slug?.replace(/\/?index$/, "").split("/") || [""];

    let cursor = pageTree;

    for (var i = 0; i < path.length; i++) {
      if (!("children" in cursor)) {
        cursor.children = {};
      }

      if (!(path[i] in cursor?.children)) {
        cursor.children[path[i]] = {
          parent: undefined,
          title: path[i]
            .replaceAll("-", " ")
            .replace(
              /\w\S*/g,
              (t: string) =>
                t.charAt(0).toUpperCase() + t.substring(1).toLowerCase()
            ),
        };
      }
      cursor = cursor.children[path[i]];

      if (i + 1 == path.length) {
        Object.assign(cursor, page.props.page);
        // if (cursor?.slug === "index") {
        //   cursor.slug = "/";
        // }
      }
    }
  });

  return pageTree;
}

// async function getPageTree(): Promise<any> {
//   // Get all online pages
//   const collection = await getCollection("pages", ({ data }) => {
//     return data.status === "online";
//   });

//   const pages = collection.map((e, i) => {
//     return {
//       slug: e.slug,
//       title: e.data.title,
//       id: e.id,
//       // path: e.id.replace(/\..*$/, ""),
//     };
//   });

//   return makeTree(pages);
// }

const { id } = Astro.props;
const depth = typeof Astro.props.depth === "number" ? ++Astro.props.depth : 0;
const pages =
  typeof Astro.props.pages === "undefined"
    ? makeTree(Astro.props.paths)
    : Astro.props.pages;

// const pages = {};

const Wrapper = depth ? Fragment : "nav";
---

{!depth && <Debug {pages} />}

<Wrapper>
  <ul>
    {
      "children" in pages &&
        Object.values(pages.children).map((page: any, i) => (
          <li>
            <a href={page?.slug && `/${page?.slug.replace(/index$/, "")}`}>
              {page?.title}
            </a>
            {"children" in page && <Astro.self depth={depth} pages={page} />}
          </li>
        ))
    }
  </ul>
</Wrapper>
