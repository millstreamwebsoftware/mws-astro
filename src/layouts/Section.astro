---
import Sticker from "@components/sticker/sticker.astro";
import clsx from "clsx";
import { convertColorString } from "@mws-astro/util";
import Icon from "@shared/icon.astro";

export interface Props {
  component: string;
  height?: number;
  background_color?: string;
  classes?: any;
  style?: Record<string, any>;
  indent?: boolean;
  key?: string;
}

const { component, height, background_color, classes, style, key } =
  Astro.props;

const background = background_color && convertColorString(background_color);
const id = `${component}-${key}`;
const indent = Astro.props.indent ?? true;

const classList = clsx(classes).split(" ");

const stickers = classList // Resolve classes like class:list
  .filter((cl) => cl.startsWith("sticker-"));

const expando = classList.includes("expando") ? true : false;
---

<section
  style={{
    ...(background && { "--background-color": background }),
    ...(height && { "--height": height + "vh" }),
    ...style,
  }}
  class:list={[
    component,
    classes,
    { "no-indent": !indent },
    { "background-color": background },
  ]}
  data-component={component}
  {id}
>
  <div class="component-wrapper">
    <slot />
  </div>
  {
    stickers.map((sticker) => {
      return <Sticker name={sticker.replace(/^sticker-/, "")} />;
    })
  }
  {
    expando && (
      <div class="expando-overlay">
        <div class="expando-button" data-for={id}>
          <Icon name="fa6-solid:circle-chevron-down" height="3rem" />
          <p>Expand</p>
        </div>
      </div>
    )
  }
</section>

<style lang="scss">
  section {
    position: relative;
    height: var(--height);
  }

  section[data-expando] {
    height: calc(30vh + (var(--indent) * 2));

    .component-wrapper {
      max-height: 100%;
      overflow: hidden;
    }
  }

  [data-expando] > .expando-overlay::after {
    content: "";
    position: absolute;
    inset: 0;
    top: 0;
    backdrop-filter: blur(4px);
    z-index: 10;
    background: linear-gradient(
      to bottom,
      transparent 50%,
      rgb(var(--background-color)) 90%
    );
    // background-color: rgb(var(--background-color) / 0.5);
    mask-image: linear-gradient(to bottom, transparent 50%, white 80%);
  }

  .expando-overlay {
    cursor: pointer;
  }

  // section.columns .expando-overlay {
  //   padding-bottom: 5rem;
  //   margin-top: -2rem;
  // }
  // section:is(.no-indent, .no-indent-bottom) {
  //   .expando-overlay {
  //     padding-bottom: 5rem;
  //   }
  // }

  .expando-button {
    position: absolute;
    z-index: 11;
    // bottom: 2rem;
    bottom: calc(var(--indent) * 0.5 - 1.5rem);
    left: 50%;
    display: flex;
    transform: translate(-1.5rem);
    transition: transform 0.5s ease;

    color: rgb(var(--text-color));

    p {
      overflow: hidden;
      white-space: nowrap;
      text-indent: 1rem;
      transition: clip-path 0.5s ease;
      clip-path: polygon(0% 0%, 0% 0%, 0% 100%, 0% 100%);
    }
  }

  // section:is(.no-indent, .no-indent-bottom, .columns) > .expando-overlay {

  // }

  // section:not(.columns) > .expando-overlay {
  //   // margin-top: calc(var(--indent) * -0.5);
  //   height: 0;
  //   padding: 0;
  // }

  section:not([data-expando]) > .expando-overlay {
    // position: relative;

    // .expando-button {
    //   bottom: 0;
    // }
  }

  .expando-overlay:hover .expando-button {
    transform: translate(-50%);
    p {
      clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%);
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", setupExpando);
  document.addEventListener("astro:after-swap", setupExpando);

  function setupExpando() {
    const expandos = Array.from(document.querySelectorAll(".expando-overlay"));

    expandos.forEach((expando) => {
      expando.parentElement?.setAttribute("data-expando", "collapsed");
      expando.addEventListener("click", (e) => {
        const t = e?.currentTarget as HTMLElement;
        if (!t) return;
        let state = t?.parentElement?.toggleAttribute("data-expando");
        const buttonIcon = t.querySelector(".expando-button .icon");
        const buttonText = t.querySelector(".expando-button p");
        if (buttonText) buttonText.innerHTML = state ? "Expand" : "Collapse";
        if (buttonIcon) buttonIcon.classList.toggle("rot180", !state);
      });
    });
  }
</script>
