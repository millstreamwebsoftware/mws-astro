---
interface Props {
    src: string;
    background?: boolean;
    title?: boolean;
    byline?: boolean;
    autoplay?: boolean;
    muted?: boolean;
    loop?: boolean;
}

const { src, background, title, byline, autoplay, muted, loop } = Astro.props;

const url = new URL(src);

if (url.hostname.endsWith("vimeo.com")) {
    url.hostname = "player.vimeo.com";
    url.pathname = url.pathname.replace(/^(\/.*\/)(\d*)$/, "/video/$2");

    if (background) {
        url.searchParams.append("background", "1");
        url.searchParams.append("pip", "0");
    } else {
        url.searchParams.append("title", title ? "1" : "0");
        url.searchParams.append("byline", byline ? "1" : "0");
        url.searchParams.append("muted", muted || autoplay ? "1" : "0");
        url.searchParams.append("autoplay", autoplay ? "1" : "0");
        url.searchParams.append("loop", loop ? "1" : "0");
    }

    url.searchParams.append("dnt", "1");
}
---

<div class:list={["video-wrapper", { background }]}>
    <iframe src={url.toString()} allowfullscreen allow="autoplay"></iframe>
</div>
<style lang="scss">
    .video-wrapper.background {
        position: absolute;
        overflow: hidden;

        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        container: video-wrapper / size;

        iframe {
            position: absolute;
            height: max(56.25cqw, 100cqh);
            width: max(177.778cqh, 100cqw);

            left: calc((max(177.778cqh, 100cqw) - 100cqw) * -.5);
            top: calc((max(56.25cqw, 100cqh) - 100cqh) * -.5);
        }
    }

    .video-wrapper:not(.background) {
        iframe {
            width: 100%;
            height: auto;
            aspect-ratio: 16/9;
        }
    }
</style>
