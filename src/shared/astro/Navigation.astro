---
import preferences from "@data/preferences.json";
import Icon from "./icon.astro";

export interface Props {
  pages?: any;
  id?: string;
  depth?: number;
  currentPath?: string;
  paths?: any[];
}

// interface PageTree {
//   children?: any;
//   parent: PageTree | undefined;
//   title?: string;
//   slug?: string;
//   id?: string;
//   selected?: number;
// }

// function makeTree(pages: any, currentPath?: string) {
//   const pageTree: PageTree = {
//     children: {},
//     parent: undefined,
//     selected: 0,
//   };

//   const filteredPages = pages.filter((page: any) => {
//     return (
//       page.props.page.data.status === "online" &&
//       (page.params.slug !== undefined || preferences.header.show_home)
//     );
//   });

//   const sortedPages = filteredPages.sort(
//     (a: any, b: any) =>
//       (a.params.slug?.split("/").length || 0) -
//         (b.params.slug?.split("/").length || 0) ||
//       a.props.page.data.order - b.props.page.data.order
//   );

//   sortedPages.forEach((page: any) => {
//     let path = page.params.slug?.replace(/\/?index$/, "").split("/") || [""];

//     let cursor = pageTree;
//     let selected = Number(page.params.slug === currentPath);

//     for (var i = 0; i < path.length; i++) {
//       if (!("children" in cursor)) {
//         cursor.children = {};
//       }

//       if (!(path[i] in cursor?.children)) {
//         cursor.children[path[i]] = {
//           parent: undefined,
//           title: path[i]
//             .replaceAll("-", " ")
//             .replace(
//               /\w\S*/g,
//               (t: string) =>
//                 t.charAt(0).toUpperCase() + t.substring(1).toLowerCase()
//             ),
//           selected,
//         };
//       }

//       cursor.selected = selected;

//       cursor = cursor.children[path[i]];

//       if (i + 1 == path.length) {
//         cursor.selected = cursor.selected ? 2 : 0;
//         cursor.id = page.props.page.id;
//         cursor.slug = page.params.slug || "";
//         Object.assign(cursor, page.props.page.data);
//       }
//     }
//   });

//   return pageTree;
// }

const { id } = Astro.props;
const depth = typeof Astro.props.depth === "number" ? ++Astro.props.depth : 0;
// const pages =
//   typeof Astro.props.pages === "undefined"
//     ? makeTree(Astro.props.paths, Astro.props.currentPath)
//     : Astro.props.pages;

const pages = Astro.props.pages ?? Astro.locals.tree;

const Wrapper = depth ? Fragment : "nav";

// !depth && console.log(pages);

// {!depth && <Debug {pages} />}

console.log(Astro.locals.collections);
---

<Wrapper role="navigation" aria-label="Main menu">
  {
    !depth && (
      <>
        <div id="mobile-nav-buttons">
          <button id="mobile-nav-menu" aria-expanded="false">
            <Icon name="fa6-solid:bars" height="2rem" />
          </button>
          <a id="mobile-nav-home" href="/">
            <Icon name="fa6-solid:house" height="2rem" />
          </a>
        </div>
        <div id="mobile-nav-overlay" />
      </>
    )
  }
  <ul class:list={[`depth-${depth}`]}>
    {
      "children" in pages &&
        Object.values(pages.children).map((page: any, i) => (
          <li
            tabindex="0"
            class:list={[
              {
                active: page.selected,
                selected: page.selected === 2,
                children: "children" in page,
              },
              `depth-${depth}`,
            ]}
          >
            <a
              aria-selected={page.selected === 2 ? "true" : "false"}
              href={
                typeof page?.slug !== "undefined"
                  ? `/${page.slug.replace(/index$/, "")}`
                  : undefined
              }
            >
              <span>{page?.title}</span>
            </a>
            {"children" in page && <Astro.self depth={depth} pages={page} />}
          </li>
        ))
    }
  </ul>
</Wrapper>

<script>
  import {
    computePosition,
    type ComputePositionConfig,
    autoUpdate,
    offset,
    shift,
    flip,
  } from "@floating-ui/dom";
  import hoverintent from "hoverintent";

  // TODO: Replace individual event listeners with a single event listener
  // TODO: Mobile Navigation

  const anchors = document.querySelectorAll("nav li");

  const popin = function (this: HTMLElement, e: Event) {
    const anchor = this;
    const dropdown = anchor.querySelector("ul");
    if (!dropdown) return;
    dropdown.classList.add("dropdown-open");
    const options: ComputePositionConfig = anchor.matches(".depth-0")
      ? {
          placement: "bottom-start",
          middleware: [shift(), offset({ crossAxis: 0 })],
        }
      : {
          placement: "right-start",
          middleware: [flip(), offset({ mainAxis: 0, crossAxis: 0 })],
        };

    // @ts-ignore
    anchor.cleanup = autoUpdate(anchor, dropdown, () => {
      computePosition(anchor, dropdown, options).then(({ x, y }) => {
        Object.assign(dropdown.style, {
          left: `${x}px`,
          top: `${y}px`,
        });
      });
    });
  };

  const popout = function (this: HTMLElement, e: Event) {
    const anchor = this;
    if (
      "relatedTarget" in e &&
      e.relatedTarget instanceof Node &&
      anchor.contains(e.relatedTarget)
    ) {
      return;
    }
    const dropdown = anchor.querySelector("ul");
    if (!dropdown) {
      return;
    }
    dropdown.classList.remove("dropdown-open");
    if ("cleanup" in anchor && anchor.cleanup instanceof Function) {
      anchor.cleanup();
    }
  };

  anchors.forEach((anchor) => {
    hoverintent(anchor, popin, popout).options({
      handleFocus: true,
    });
  });

  document.getElementById("mobile-nav-menu")?.addEventListener("click", (e) => {
    let t = e?.currentTarget as HTMLElement;
    let nav = t.closest("nav");
    let state = t.getAttribute("aria-expanded") === "false";
    t.setAttribute("aria-expanded", state.toString());

    nav?.classList.toggle("expanded", state);
  });

  document
    .getElementById("mobile-nav-overlay")
    ?.addEventListener("click", (e) => {
      let t = document.getElementById("mobile-nav-menu") as HTMLElement;
      let nav = t.closest("nav");
      t.setAttribute("aria-expanded", "false");
      nav?.classList.toggle("expanded", false);
    });
</script>

<style lang="scss">
  nav {
    z-index: 999;
  }

  #mobile-nav-buttons {
    display: none;
    z-index: 1000;
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    height: 9rem;
    grid-template-areas: "left centre right";
    grid-template-columns: repeat(3, 1fr);
    align-items: center;
    justify-items: center;
  }

  #mobile-nav-buttons :is(button, a) {
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--header-color);

    padding: 2rem;
    border-radius: 6rem;
    bottom: 0.5rem;
    width: 8rem;
    height: 8rem;
  }

  #mobile-nav-menu {
    grid-area: centre;
    background-color: rgb(var(--header-background-color));
    // left: calc(50% - 4rem);
    box-shadow: 0 0 2rem #0005;
    border: 0;
    z-index: 1;
  }

  #mobile-nav-home {
    opacity: 0;
    pointer-events: none;
    grid-area: left;
    border: 0.5px solid #eee;
    transform: translate(calc(25vw + 3rem)) scale(0.5);
    transition:
      transform 0.3s ease,
      opacity 0.3s ease;
    z-index: 0;
  }

  #mobile-nav-overlay {
    display: none;
    pointer-events: none;
    // border: 1px solid red;
    position: fixed;
    inset: 0;
    z-index: -1;
    background-color: #0000;
    transition: background-color 0.3s ease;
  }

  @media only screen and (max-width: 768px) {
    #mobile-nav-buttons {
      display: grid;
    }

    #mobile-nav-overlay {
      display: block;
    }

    nav {
      position: fixed;
      bottom: 0;
      left: 0;
      right: 0;
      // top: 40%;

      ul.depth-0 {
        height: fit-content;
        padding: 2rem 2rem 10rem;
        // padding-bottom: 10rem;
        // padding-top: 2rem;
        background: linear-gradient(
          to bottom,
          rgb(var(--header-background-color)),
          rgb(var(--header-background-color-bottom))
        );
        box-shadow: 0 0 10rem #0003;
        margin-right: 0;
        flex-direction: column;
        transition:
          clip-path 0.3s ease-in-out,
          opacity 0.3s ease-out,
          transform 0.3s ease;

        pointer-events: none;
        clip-path: circle(2rem at 50% calc(100% - 12rem));
        opacity: 0;
        transform: translate(0 10rem);
      }
    }

    nav.expanded {
      #mobile-nav-home {
        pointer-events: initial;
        transform: translate(0) scale(1);
        opacity: 1;
      }

      ul.depth-0 {
        clip-path: circle(150% at 50% calc(100% - 4.5rem));
        pointer-events: initial;
        transform: translate(0 0);
        opacity: 1;
      }

      #mobile-nav-overlay {
        display: block;
        pointer-events: all;
        background-color: #0004;
      }
    }
  }

  ul.depth-0 {
    grid-area: navigation;
    display: flex;
    flex-direction: row;
    justify-content: flex-end;
    margin-right: 4rem;
    height: 100%;

    gap: 1rem;
  }

  li.depth-0 > a {
    height: 100%;
    /* padding: 20px; */
    color: rgb(var(--header-color));
    display: flex;
    flex-direction: column;
    justify-content: center;
  }

  li.depth-0 > a span {
    padding: 10px 20px;
  }

  li.depth-0.children::after {
    content: "";
    position: absolute;
    bottom: 5px;
    left: calc(50% - 3px);
    width: 6px;
    height: 6px;
    border-radius: 1rem;
    background-color: #eee;
  }

  ul {
    list-style-type: none;
    padding: 0;
  }

  .depth-0 ul {
    position: absolute;
    width: max-content;
    top: 0;
    left: 0;
    background-color: white;
    display: none;
  }

  .depth-1 li {
    width: max-content;
    box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.2);
  }

  .depth-1 a span {
    padding: 10px 20px;
  }

  .depth-0 ul:not(ul.dropdown-open) {
    display: none;
  }

  ul.dropdown-open {
    display: block;
  }

  /* .active {
    background-color: #eee;
  } */

  /* .selected {
    background-color: #ddd;
  } */

  .active > a span {
    font-weight: bold;
    border: 4px solid #0001;
  }

  a {
    display: block;
    text-decoration: none;
    color: rgb(0 0 0);
    cursor: default;
  }

  a > span {
    border: 4px solid #0000;
    transition: background-color 0.1s ease-out;
    border-radius: var(--border-radius);
  }

  a:hover span {
    background-color: rgba(0, 0, 0, 0.1);
  }

  a[href] {
    cursor: pointer;
  }

  a[href]:hover span {
    background-color: rgba(0, 0, 0, 0.15);
  }
</style>
