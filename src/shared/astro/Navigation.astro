---
import preferences from "@data/preferences.json";
import Icon from "./icon.astro";
import type { TreeNode } from "@mws-astro/middleware";

export interface Props {
  pages?: TreeNode;
  id?: string;
  depth?: number;
  currentPath?: string;
}

const { id } = Astro.props;
const depth = typeof Astro.props.depth === "number" ? ++Astro.props.depth : 0;
const pages: TreeNode = Astro.props.pages ?? Astro.locals.tree; // If not given input - start with global nav
const Wrapper = depth ? Fragment : "nav";
const Items = depth ? Fragment : "div";

// depth == 0 && console.log(pages);
---

<Wrapper id="navigation" role="navigation" aria-label="Main menu">
  {
    !depth && (
      <>
        <div id="mobile-nav-buttons">
          <button id="mobile-nav-menu" aria-expanded="false">
            <Icon name="fa6-solid:bars" height="2rem" />
          </button>
          <a id="mobile-nav-home" href="/">
            <Icon name="fa6-solid:house" height="2rem" />
          </a>
        </div>
        <div id="mobile-nav-overlay" />
      </>
    )
  }
  <Items id="navigation-items">
    <ul class:list={[`depth-${depth}`]}>
      {
        pages?.href && (
          <li
            class:list={[
              {
                selected: pages.selected === 2,
              },
              `depth-${depth}`,
            ]}
          >
            <a
              aria-selected={pages.selected === 2 ? "true" : "false"}
              href={pages.href !== undefined ? "/" + pages.href : undefined}
            >
              <span>{pages?.title}</span>
            </a>
          </li>
        )
      }
      {
        pages.children &&
          Object.values(pages.children).map((page: TreeNode, i) => {
            // Skip home element if show_home is false
            if (!preferences.header.show_home && page.href === "") return;
            const children =
              page.children && Object.keys(page.children)?.length;
            const id = `nav-${
              page.slug || page.title?.toLowerCase().replaceAll(" ", "-")
            }`;
            return (
              <Fragment>
                <li
                  class:list={[
                    {
                      active: page.selected,
                      selected: page.selected === 2,
                      children,
                    },
                    `depth-${depth}`,
                  ]}
                  aria-haspopup={children ? "menu" : undefined}
                  aria-labelledby={id}
                >
                  <a
                    tabindex="0"
                    aria-selected={page.selected === 2 ? "true" : "false"}
                    href={
                      !children && page.href !== undefined
                        ? "/" + page.href
                        : undefined
                    }
                  >
                    <span {id}>
                      {page?.title}
                      {children && (
                        <div class="dropdown-indicator">
                          <Icon name="fa6-solid:caret-down" height="2rem" />
                        </div>
                      )}
                    </span>
                  </a>

                  {children && <Astro.self depth={depth} pages={page} />}
                </li>
              </Fragment>
            );
          })
      }
      {!!depth && <div class="dropdown-caret" />}
    </ul>
  </Items>
</Wrapper>

<script>
  import {
    computePosition,
    type ComputePositionConfig,
    autoUpdate,
    offset,
    shift,
    flip,
    size,
    arrow,
  } from "@floating-ui/dom";
  // import { navigate } from "astro:transitions/client";
  // import hoverintent from "hoverintent";

  document.addEventListener("DOMContentLoaded", setupNavigation);
  document.addEventListener("astro:after-swap", setupNavigation);

  function setupNavigation() {
    const navigation = document.getElementById("navigation");
    const mobileNavButton = document.getElementById("mobile-nav-menu");
    const mobileNavOverlay = document.getElementById("mobile-nav-overlay");
    const caretHeight = 20;

    // const navTarget = null;
    if (!navigation) throw Error("Navigation not found.");
    document.body.addEventListener("click", handleNavigationEvent);
    document.body.addEventListener("keydown", handleNavigationEvent);
    // navigation.addEventListener("focusin", handleNavigationEvent);
    navigation.addEventListener("focusout", handleNavigationEvent);

    /**
     * Close the dropdown of a given element, and cleanup
     * @param target element to close the dropdown of
     */
    function closeNav(target: HTMLElement) {
      target.classList.remove("dropdown-open");
      target.setAttribute("aria-expanded", "false");
      if ("_cleanup" in target && target._cleanup instanceof Function) {
        target._cleanup();
      }
    }

    /**
     * Close all dropdowns decending from target
     * @param target defaults to navigation if unset
     * @param inverse close all dropdowns outside of target
     */
    function closeAllNav(target?: HTMLElement | undefined, inverse?: boolean) {
      if (!navigation) throw Error("Navigation not found.");
      if (target === undefined) target = navigation;
      if (inverse) {
        Array.from(navigation.querySelectorAll<HTMLElement>(".dropdown-open"))
          .filter((d) => !d.contains(target as Node))
          .forEach(closeNav);
      } else
        target
          ?.querySelectorAll<HTMLElement>(".dropdown-open")
          .forEach(closeNav);
    }

    /**
     * Open the dropdown of the target element
     * @param target element to open the dropdown of
     */
    function openNav(target: FloatingUIElement) {
      // Close all dropdowns that do not contain the new dropdown
      closeAllNav(target, true);

      const dropdown = target.querySelector(":scope ul") as HTMLElement;
      if (!dropdown) return;
      const caret = dropdown.querySelector(
        ":scope > .dropdown-caret"
      ) as HTMLElement;
      // console.log(dropdown.getBoundingClientRect());

      const options: ComputePositionConfig = target.classList.contains(
        "depth-0"
      )
        ? {
            placement: "bottom-start",
            strategy: "fixed", // Probably depends on if the menu is fixed or not
            middleware: [
              offset({ mainAxis: caretHeight * 0.9, crossAxis: 0 }),
              size({
                apply({ elements, availableHeight }) {
                  if (isMobileNav()) {
                    Object.assign(elements.floating.style, {
                      maxHeight: null,
                    });
                    return;
                  }
                  Object.assign(elements.floating.style, {
                    maxHeight: `${availableHeight}px`,
                  });
                },
              }),
              shift(),
              arrow({ element: caret, padding: 10 }),
            ],
          }
        : {
            placement: "right-start",
            strategy: "fixed",
            middleware: [
              offset({ mainAxis: caretHeight * 0.9, crossAxis: 0 }),
              shift(),
              size({
                apply({ elements, availableHeight }) {
                  if (isMobileNav()) {
                    Object.assign(elements.floating.style, {
                      maxHeight: null,
                    });
                    return;
                  }
                  Object.assign(elements.floating.style, {
                    maxHeight: `${availableHeight}px`,
                  });
                },
              }),
              flip(),
              arrow({ element: caret, padding: 10 }),
            ],
          };

      target._cleanup = autoUpdate(target, dropdown, () => {
        computePosition(target, dropdown, options).then(
          ({ x, y, middlewareData, placement }) => {
            if (isMobileNav()) {
              Object.assign(dropdown.style, {
                left: null,
                top: null,
              });
              return;
            }

            Object.assign(dropdown.style, {
              left: `${x}px`,
              top: `${y}px`,
            });
            if (middlewareData.arrow) {
              let turn,
                top,
                right,
                bottom,
                left = null;
              let direction = placement.replace(/-.*/, "");
              let heightOffset = `${-caretHeight}px`;
              let widthOffset = `${-caretHeight}px`;

              // Position arrow based on placement direction
              switch (direction) {
                default:
                case "top":
                  left = `${middlewareData.arrow.x}px`;
                  bottom = heightOffset;
                  turn = 0.5;
                  break;

                case "bottom":
                  left = `${middlewareData.arrow.x}px`;
                  top = heightOffset;
                  turn = 0;
                  break;

                case "left":
                  top = `${middlewareData.arrow.y}px`;
                  right = widthOffset;
                  turn = 0.25;
                  break;

                case "right":
                  top = `${middlewareData.arrow.y}px`;
                  left = widthOffset;
                  turn = 0.75;
                  break;
              }

              Object.assign(caret.style, {
                transform: `rotate(${turn}turn)`,
                top,
                right,
                bottom,
                left,
              });
            }
          }
        );
      });

      target.setAttribute("aria-expanded", "true");
      target.classList.add("dropdown-open");
    }

    /**
     * Media query to test if mobile nav should be shown
     */
    function isMobileNav(): boolean {
      return window.matchMedia("screen and (max-width: 768px)").matches;
    }

    /**
     * Update dropdown state after event
     * @param this
     * @param e
     */
    function handleNavigationEvent(this: HTMLElement, e: Event) {
      if (e instanceof FocusEvent && e.type === "focusout") {
        if (
          e.relatedTarget &&
          !navigation?.contains(e.relatedTarget as Element)
        )
          closeAllNav();
        return;
      }

      if (e instanceof KeyboardEvent) {
        switch (e.key) {
          case "Escape":
            closeAllNav();

          default:
            return;

          case " ":
          case "Enter":
        }
      }

      const target: HTMLElement | null = (e.target as HTMLElement).closest(
        "li, #navigation"
      );
      if (
        !target ||
        target.id === "navigation" ||
        !target.classList.contains("children")
      ) {
        closeAllNav();
        return;
      }

      const state = !target.classList.contains("dropdown-open");

      if (state) {
        // Dropdown Open
        openNav(target);
      } else {
        // Dropdown close
        closeNav(target);
        closeAllNav(target);
      }
    }

    /**
     * Opens and closes the mobile navigation menu
     * @param open optionally override the toggle
     */
    function setModalState(open?: boolean) {
      let newState = navigation?.classList.toggle("expanded", open);
      if (newState === undefined) return;
      mobileNavButton?.setAttribute("aria-expanded", newState.toString());

      // Fix/Unfix body to prevent scrolling through the menu
      if (newState) {
        document.body.style.top = `-${window.scrollY}px`;
        document.body.style.position = "fixed";
        document.body.style.overflow = "hidden";
        document.documentElement.style.overflow = "hidden";
      } else {
        const scrollY = document.body.style.top;
        document.body.style.position = "";
        document.body.style.top = "";
        document.body.style.overflow = "";
        document.documentElement.style.overflow = "";
        window.scrollTo({
          left: 0,
          top: parseInt(scrollY || "0") * -1,
          behavior: "instant",
        });
      }
    }

    // Mobile Nav
    mobileNavButton?.addEventListener("click", (e) => {
      setModalState();
    });

    mobileNavOverlay?.addEventListener("click", (e) => {
      setModalState(false);
    });
  }
</script>

<style lang="scss">
  nav {
    z-index: 999;
  }

  #navigation-items {
    height: 100%;
  }

  #mobile-nav-buttons {
    display: none;
    z-index: 1000;
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    height: 9rem;
    grid-template-areas: "left centre right";
    grid-template-columns: repeat(3, 1fr);
    align-items: center;
    justify-items: center;
  }

  #mobile-nav-buttons :is(button, a) {
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--header-color);

    padding: 2rem;
    border-radius: 6rem;
    bottom: 0.5rem;
    width: 8rem;
    height: 8rem;
  }

  #mobile-nav-menu {
    pointer-events: all;
    grid-area: centre;
    background-color: rgb(var(--header-background-color));
    // left: calc(50% - 4rem);
    box-shadow: 0 0 2rem #0005;
    border: 0;
    z-index: 1;
  }

  #mobile-nav-home {
    opacity: 0;
    pointer-events: none;
    grid-area: left;
    border: 0.5px solid #eee;
    transform: translate(calc(25vw + 3rem)) scale(0.5);
    transition:
      transform 0.3s ease,
      opacity 0.3s ease;
    z-index: 0;
  }

  #mobile-nav-overlay {
    display: none;
    pointer-events: none;
    // border: 1px solid red;
    position: fixed;
    inset: 0;
    z-index: -1;
    background-color: #0000;
    transition: background-color 0.3s ease;
  }

  @media only screen and (max-width: 768px) {
    #mobile-nav-buttons {
      display: grid;
    }

    #mobile-nav-overlay {
      display: block;
    }

    nav {
      position: fixed;
      bottom: 0;
      left: 0;
      right: 0;
      pointer-events: none;
      max-height: 100vh;

      // -webkit-overflow-scrolling: touch;
      // top: 40%;

      #navigation-items {
        background: linear-gradient(
          to bottom,
          rgb(var(--header-background-color)),
          rgb(var(--header-background-color-bottom))
        );

        // padding: 2rem 2rem 10rem;
        position: relative;
        height: 100%;
        max-height: 100vh;
        overflow-y: scroll;
        overscroll-behavior: contain;

        box-shadow: 0 0 10rem #0003;
        margin-right: 0;

        transition:
          clip-path 0.3s ease-in-out,
          opacity 0.3s ease-out,
          transform 0.3s ease;

        clip-path: circle(2rem at 50% calc(100% - 12rem));
        opacity: 0;
        transform: translate(0 10rem);
      }

      ul.depth-0 {
        margin: 2rem 2rem 10rem;

        height: fit-content;
        flex-direction: column;

        ul {
          margin-left: 3vw;
        }
      }
    }

    nav.expanded {
      #mobile-nav-home {
        pointer-events: initial;
        transform: translate(0) scale(1);
        opacity: 1;
        pointer-events: all;
      }

      #navigation-items {
        clip-path: circle(150% at 50% calc(100% - 4.5rem));
        pointer-events: initial;
        transform: translate(0 0);
        opacity: 1;
      }

      #mobile-nav-overlay {
        display: block;
        pointer-events: all;
        background-color: #0004;
      }
    }

    .depth-0 ul {
      position: relative;
      top: 0 !important;
      left: 0 !important;
      display: none;
    }

    .dropdown-open > ul {
      display: flex;
    }

    ul {
      flex-direction: column;
    }
  }

  ul {
    list-style-type: none;
    padding: 0;
  }

  .depth-1 a span {
    padding: 0 10px;
    margin: 0 5px;
  }

  .depth-1 li:first-of-type > a span {
    margin-top: 5px;
  }

  .depth-1 li:last-of-type > a span {
    margin-bottom: 5px;
  }

  li.depth-0 > a span {
    padding: calc(var(--indent) * 0.1) calc(var(--indent) * 0.2);
  }

  .dropdown-open > a .dropdown-indicator {
    transform: rotate(180deg);
  }

  @media screen and (min-width: 769px) {
    ul.depth-0 {
      grid-area: navigation;
      display: flex;
      flex-direction: row;
      justify-content: flex-end;
      height: 100%;

      gap: 0.5vw;
    }

    li.depth-0 > a {
      height: 100%;
      /* padding: 20px; */
      color: rgb(var(--header-color));
    }

    .depth-0 ul {
      position: fixed;

      top: 0;
      left: 0;
      display: flex;

      // Workaround for https://github.com/philipwalton/flexbugs#flexbug-14
      flex-direction: row;
      // flex-direction: column;
      flex-wrap: wrap;
      writing-mode: vertical-lr;
      // text-orientation: upright;

      li {
        writing-mode: horizontal-tb;
      }

      background-color: rgb(var(--header-background-color));
      box-shadow: 2px 2px 16px #00000044;
      border: 2px solid
        color-mix(
          in oklab,
          rgb(var(--header-background-color)) 70%,
          rgb(var(--header-color))
        );
      border-radius: var(--border-radius);

      visibility: hidden;
      pointer-events: none;
    }

    .depth-1 a .dropdown-indicator {
      transform: rotate(-90deg);
    }

    .depth-1 .dropdown-open > a .dropdown-indicator {
      transform: rotate(90deg);
    }

    .dropdown-open > ul {
      visibility: visible;
      pointer-events: all;

      & > .dropdown-caret {
        display: block;
      }
    }

    .dropdown-caret {
      position: absolute;
      width: 20px;
      height: 20px;
      filter: drop-shadow(2px 2px 16px #00000088);

      // Prevent shadow overlapping own menu
      background-color: rgb(var(--header-background-color));
      clip-path: polygon(-200% -200%, 300% -200%, 300% 100%, -200% 100%);

      // mask-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' style='fill-rule:evenodd%3bclip-rule:evenodd%3bstroke-linejoin:round%3bstroke-miterlimit:2' viewBox='0 0 768 768'%3e%3cpath d='M512 512.002c0 141.385 114.616 256.001 256 256.001H0c141.385 0 256-114.616 256-256V127.938A127.94 127.94 0 0 1 383.937.001h.025A128.037 128.037 0 0 1 512 128.039z'/%3e%3c/svg%3e");
      // mask-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' style='fill-rule:evenodd%3bclip-rule:evenodd%3bstroke-linejoin:round%3bstroke-miterlimit:2' viewBox='0 0 768 768'%3e%3cpath d='M544 544.002c0 123.713 100.288 224.001 224 224.001H0c123.712 0 224-100.288 224-224V384.01a160.008 160.008 0 0 1 160.009-160.009A159.994 159.994 0 0 1 544 383.995z'/%3e%3c/svg%3e");
      mask-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 768 768'%3e%3cpath d='M576 576.003a192 192 0 0 0 192 192H0a192 192 0 0 0 192-192V384.005a192.004 192.004 0 0 1 192.004-192.003h.008a192 192 0 0 1 135.757 56.231A192 192 0 0 1 576 383.989z'/%3e%3c/svg%3e");
      mask-repeat: no-repeat;
    }
  }

  .dropdown-caret {
    display: none;
  }

  .active > a span {
    font-weight: bold;
    border: 4px solid
      color-mix(
        in oklab,
        rgb(var(--header-background-color)) 70%,
        rgb(var(--header-color))
      );
  }

  a {
    display: flex;
    align-items: center;
    flex-direction: row;
    text-decoration: none;
    color: rgb(var(--header-color));
    cursor: pointer;
  }

  a:hover span {
    background-color: color-mix(
      in oklab,
      rgb(var(--header-background-color)) 70%,
      rgb(var(--header-color))
    );
  }

  a > span {
    flex: 1 1 100%;
    border: 4px solid #0000;
    transition: background-color 0.1s ease-out;
    border-radius: var(--border-radius);

    display: flex;
    align-items: center;
    flex-direction: row;
    justify-content: space-between;
    gap: 1rem;
    text-align: center;
  }
</style>
