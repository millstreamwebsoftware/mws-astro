---
import preferences from "@data/preferences.json";
import { bookshopName } from "@mws-astro/util";
import MobileNavigation from "./MobileNavigation.astro";

export interface Props {}

const prefs: Record<string, any> | typeof preferences = preferences;
const placement = prefs?.header?.center_dropdowns ? "bottom" : "bottom-start";
const components: Record<string, any> = {};
const componentImports = import.meta.glob(
  ["/src/mws-astro/src/components/navigation/**/*.astro"],
  {
    eager: true,
  },
);

const componentOverrides = import.meta.glob(
  ["/src/components/navigation/**/*.astro"],
  {
    eager: true,
  },
);

Object.entries(componentImports).forEach(
  ([path, obj]: [string, any]) =>
    (components[bookshopName(path)] = obj.default),
);

Object.entries(componentOverrides).forEach(
  ([path, obj]: [string, any]) =>
    (components[bookshopName(path)] = obj.default),
);

const primary = prefs.header?.navigation || [
  { _bookshop_name: "navigation/collection", collection: "pages" },
];

const secondary: any = prefs.header?.secondary_navigation || [];
const navBars = [primary, secondary];
---

<nav
  id="navigation"
  role="navigation"
  aria-label="Main menu"
  data-placement={placement}
>
  <MobileNavigation />
  <div id="navigation-bars">
    {
      navBars.map((items: any, i: number) => {
        if (!items.length) return; // Don't generate wrappers for empty bars

        return (
          <div
            class="navigation-items"
            class:list={[i ? "secondary" : "primary"]}
          >
            {items.map((item: any, i: number) => {
              var Component = components[item._bookshop_name];
              if (Component) {
                return (
                  <div class:list={["navigation-item"]}>
                    <Component
                      {...item}
                      horizontal={false}
                      key={"navi-" + i.toString()}
                    />
                  </div>
                );
              } else {
                console.warn(
                  `[Navigation] Component "${item._bookshop_name}" could not be found.`,
                );
              }
            })}
          </div>
        );
      })
    }
  </div>
</nav>

<script>
  setupNavigation();

  function setupNavigation() {
    const navigation = document.getElementById("navigation");
    const navItems = navigation?.querySelector("#navigation-bars");
    if (!navigation || !navItems) return;

    var mobileNavWidth = 768;

    function resizeHandler() {
      const rect = navItems?.getBoundingClientRect();
      if (!rect) return;

      if (
        navItems?.scrollWidth &&
        document.documentElement.clientWidth > mobileNavWidth &&
        Math.abs(navItems.scrollWidth - rect.width) > 3
      ) {
        // Navigation is overflowing, switch to mobile navigation
        mobileNavWidth = navItems.scrollWidth + rect.left;
      }

      document.body.classList.toggle("mobile-nav", isMobileNav());
      navigation?.classList.toggle("mobile-nav", isMobileNav());
    }

    window.addEventListener("resize", resizeHandler);
    resizeHandler();

    /**
     * Query to test if mobile nav should be shown
     */
    function isMobileNav(): boolean {
      return window.innerWidth <= mobileNavWidth;
    }
  }
</script>

<style lang="scss">
  nav {
    z-index: 999;
    overflow: hidden;
    font-size: var(--header-font-size);

    #navigation-bars {
      z-index: 999;
    }

    &:not(.mobile-nav) {
      #navigation-bars {
        display: grid;
        position: relative;
        height: var(--header-height);

        grid-template-columns: minmax(0, 100%);
        grid-template-rows: 1fr;
        gap: 0.25rem;

        &:has(> .secondary) {
          grid-template-rows: minmax(0, 1fr) minmax(0, 2fr);

          > .primary {
            grid-row: 2 / 3;
          }

          > .secondary {
            --header-font-size: var(--text-size-xsmall);
            grid-row: 1 / 2;
            font-size: var(--header-font-size);
          }
        }
      }

      .navigation-items {
        display: flex;
        flex-direction: row;
        justify-content: flex-end;

        /* .navigation-item {
          display: contents;
        } */
      }
    }

    .navigation-item {
      display: contents;
    }
  }
</style>
