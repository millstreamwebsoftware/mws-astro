---
import { Image as AstroImage } from "astro:assets";

type CssAlignment = "top" | "bottom" | "center" | "left" | "right";
export type CssAlign = `${CssAlignment} ${CssAlignment}` | CssAlignment;

interface Props {
    image: string | any;
    width?: number;
    height?: number;
    fit?: "cover" | "contain";
    align?: CssAlign;
    alt?: string;
    // aspect?: number;
    classes?: string;
    background?: boolean;
    opacity?: number;
    quality?: "low" | "mid" | "high" | "max" | number;
    fixed?: boolean;
}

const {
    classes,
    background,
    fit = "cover",
    quality = "high",
    opacity,
    fixed = false,
} = Astro.props;

let astroImage;
let placeholder = true;

// Attempt to import the image if we are given a string
if (
    typeof Astro.props.image == "string" &&
    /^(\/?src)?\/assets/.test(Astro.props.image)
) {
    const images = import.meta.glob("src/assets/**/*");

    let imagePath: keyof typeof images = Object.keys(images).filter((i) =>
        i.endsWith(Astro.props.image),
    )[0];
    if (imagePath in images) {
        astroImage = ((await images[imagePath]()) as any)?.default;
    } else {
        console.warn(
            `[Missing Image] ${Astro.props.image} was requested but is missing.`,
        );
        placeholder = false;
    }
} else if (
    typeof Astro.props.image == "string" &&
    Astro.props.image.startsWith("public/")
) {
    const images = import.meta.glob("public/**/*");

    let imagePath: keyof typeof images = Object.keys(images).filter((i) =>
        i.endsWith(Astro.props.image),
    )[0];
    if (imagePath in images) {
        astroImage = ((await images[imagePath]()) as any)?.default;
    } else {
        console.warn(
            `[Missing Image] ${Astro.props.image} was requested but is missing.`,
        );
        placeholder = false;
    }
} else {
    placeholder = false;
}

const image = astroImage ?? Astro.props.image;
let width, height;

if (image.width && image.height) {
    let aspect = image.width / image.height;

    if (Astro.props.width != undefined) {
        width = Astro.props.width;
        height = Math.floor(width / aspect);
    } else if (Astro.props.height != undefined) {
        height = Astro.props.height;
        width = Math.floor(height * aspect);
    } else {
        width = image.width;
        height = image.height;
    }
} else {
    width = Astro.props.width ?? 256;
    height = Astro.props.height ?? 256;
    // aspect = width / height;
}

const style = {
    "--align": Astro.props.align ?? "center",
    "--opacity": opacity,
};

const file = image?.src || image;
let metadata, plData;

// @ts-expect-error
if (!ENV_BOOKSHOP_LIVE && placeholder) {
    const fs = await import("node:fs/promises");
    const Sharp = (await import("sharp")).default;

    try {
        let realFile = file.replace(/^(?:\/@fs)?(.*?)(?:\?.*)?$/, "$1");
        let f;

        try {
            f = await fs.readFile(realFile);
        } catch (err) {
            // Also try sourcing from the public directory
            realFile =
                "public" + (realFile.startsWith("/") ? "" : "/") + realFile;
            f = await fs.readFile(realFile);
        }

        let sh = Sharp(f);
        metadata = await sh.metadata();

        const { isOpaque, channels } = await sh.stats(); // Don't generate placeholders for images with alpha

        if (isOpaque || channels[3].mean >= 254) {
            // Include PNGs which are mostly opaque but not entirely
            const plSize = 16;

            let pl = await sh
                .removeAlpha()
                .resize(plSize, undefined, { fit: "inside" })
                .blur()
                .webp()
                .toBuffer();

            plData = pl.toString("base64");
        }
        // else {
        //     console.log(
        //         "Skipped transparent image:",
        //         channels[3].mean,
        //         realFile,
        //     );
        // }
    } catch (err) {
        // console.warn("While generating a placeholder an error occurred:", err);
    }
}

// Create an SVG containing the webp for full control of aspect ratio (adds extra data, but gzip should take care of it)
let placeholderStyle;
if (placeholder && plData) {
    let webpString = `data:image/webp;base64,${plData}`;
    let placeholderString = `data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='${width}' height='${height}'%3e%3cimage width='100%25' height='100%25' preserveAspectRatio='xMidYMid slice' href='${webpString}'/%3e%3c/svg%3e`;
    placeholderStyle = {
        "background-image": `url("${placeholderString}")`,
    };
}
---

<AstroImage
    src={image}
    alt=""
    {width}
    {height}
    class:list={[classes, { background, fixed }]}
    style={Object.assign({}, placeholderStyle, style)}
    densities={[1, 1.5, 2]}
    data-fit={fit}
    {quality}
/>

<style>
    img {
        object-fit: cover;
        object-position: var(--align);
        background-size: cover;
        background-position: var(--align);
        width: 100%;
        height: 100%;
        opacity: var(--opacity, 1);
        /* width: auto;
        height: auto; */
    }

    img[data-fit="contain"] {
        object-fit: contain;
        background-size: contain;
    }

    img.background {
        position: absolute;
        height: 100%;
        inset: 0;
    }

    img.fixed {
        position: fixed;
        inset: 0;
    }
</style>
