---
import ImgixClient from "@imgix/js-core";
import preferences from "@data/preferences.json";

type cropOptions =
  | "center"
  | "top"
  | "bottom"
  | "left"
  | "right"
  | "faces"
  | "focalpoint"
  | "edges"
  | "entropy";

export interface Props {
  image: string;
  width?: number;
  height?: number;
  alt?: string;
  loading?: "lazy" | "eager" | null | undefined;
  decoding?: "async" | "auto" | "sync" | null | undefined;
  style?: string;
  /**
   * Set how the image is cropped by imgix - only applies if resizeFit = "crop"
   * @default "center"
   * @see https://docs.imgix.com/apis/rendering/size/crop
   */
  crop?: cropOptions | `${cropOptions},${cropOptions}` | string;
  /** Set the images' object-fit in browser */
  fit?: "cover" | "contain";
  /**
   * Set how the image is resized by imgix
   * @default "crop"
   * @see https://docs.imgix.com/apis/rendering/size/fit
   */
  resizeFit?:
    | "clamp"
    | "clip"
    | "crop"
    | "facearea"
    | "fill"
    | "fillmax"
    | "max"
    | "min"
    | "scale";
  sizes?: string;
  aspect?: number;
  q?: number;
  /**
   * Set which automatic image optimisations imgix uses.
   * @default "compress,format"
   * @see https://docs.imgix.com/apis/rendering/auto/auto
   */
  auto?: string;
  /** Generate and attach a Low Quality Image Placeholder (LQIP) to the image */
  placeholder?: boolean;
}

var ix: ImgixClient | undefined = preferences.API.imgix?.domain
  ? new ImgixClient({
      domain: preferences.API.imgix?.domain,
      secureURLToken: preferences.API.imgix?.token,
    })
  : undefined;

const {
  image,
  alt,
  fit,
  style,
  sizes,
  placeholder,
  width: tWidth,
  height: tHeight,
} = Astro.props;
var { aspect } = Astro.props;
const loading = Astro.props.loading ?? "lazy";
const decoding = Astro.props.decoding ?? "async";

const opts = {
  fit: Astro.props.resizeFit ?? "crop",
  crop: Astro.props.crop ?? "center",
  ar: aspect ? `${aspect}:1` : undefined,
  q: Astro.props.q ?? undefined,
  auto: Astro.props.auto ?? "compress,format",
  w: tWidth ?? undefined,
  h: tHeight ?? undefined,
};

const url = Astro.site ? new URL(image, Astro.site) : image;
const file = "public" + image;

let fs: any, Sharp: any;
let metadata, plData, dominant;

// @ts-expect-error
if (!ENV_BOOKSHOP_LIVE) {
  fs = await import("node:fs/promises");
  Sharp = (await import("sharp")).default;

  try {
    const f = await fs.readFile(file);

    let sh = Sharp(f);
    metadata = await sh.metadata();
    // ({ dominant } = await sh.stats());

    if (placeholder) {
      const plSize = 16;

      let pl = await sh
        .resize(plSize, undefined, { fit: "inside" })
        .blur()
        .webp()
        .toBuffer();

      plData = pl.toString("base64");
    }
  } catch (err) {
    console.log(err);
  } finally {
    ix = undefined;
  }
}

// If ix undefined, fallback to serving image from webserver
const src = ix ? ix.buildURL(url.toString(), opts) : image; // Fallback
const srcset = ix ? ix.buildSrcSet(url.toString(), opts) : undefined;

// Figure out the size of the served image, if an aspect is provided height is recalculated
let width = tWidth || metadata?.width;
let height =
  aspect && width ? Math.floor(width / aspect) : tHeight || metadata?.height;

// Figure out the aspect ratio of the served image
aspect = width && height ? width / height : undefined;

let webpString = `data:image/webp;base64,${plData}`;
// let placeholderString = `data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='${width}' height='${height}'%3e%3cimage href='${webpString}' preserveAspectRatio='none' width="100%" height="100%"/%3e%3c/svg%3e`;

// Create an SVG containing the webp for full control of aspect ratio (adds extra data, but gzip should take care of it)
let placeholderString = `data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='${width}' height='${height}'%3e%3cimage width='100%25' height='100%25' preserveAspectRatio='none' href='${webpString}'/%3e%3c/svg%3e`;
---

<>
  {
    // @ts-expect-error
    ENV_BOOKSHOP_LIVE ? (
      <img
        src={image}
        {alt}
        class:list={fit}
        {loading}
        {decoding}
        {width}
        {height}
      />
    ) : (
      <img
        {srcset}
        {src}
        {alt}
        class:list={fit}
        {loading}
        {decoding}
        {sizes}
        {width}
        {height}
        data-aspect={aspect}
        style={{
          "background-image": `url("${placeholderString}")`,
        }}
      />
    )
  }
</>

<style>
  img {
    max-width: 100%;
    height: auto;
    /* object-position: 9999px !important; */
    background-position: center;
    background-size: cover;
    object-fit: cover;
  }

  img.contain {
    object-fit: contain;
    background-size: contain;
  }
</style>
