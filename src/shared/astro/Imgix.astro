---
import ImgixClient from "@imgix/js-core";
import preferences from "@data/preferences.json";

export interface Props {
  image: string;
  width?: number;
  height?: number;
  alt?: string;
  loading?: "lazy" | "eager" | null | undefined;
  decoding?: "async" | "auto" | "sync" | null | undefined;
  style?: string;
  crop?: string;
  fit?: string;
  sizes?: string;
  ar?: number;
  q?: number;
  auto?: string;
  placeholder?: boolean;
}

var ix =
  preferences.API.imgix?.domain &&
  new ImgixClient({
    domain: preferences.API.imgix?.domain,
    secureURLToken: preferences.API.imgix?.token,
  });

const {
  image,
  alt,
  style,
  sizes,
  placeholder,
  width: tWidth,
  height: tHeight,
  ar,
} = Astro.props;
const loading = Astro.props.loading ?? "lazy";
const decoding = Astro.props.decoding ?? "async";

const opts = {
  fit: Astro.props.fit ?? "crop",
  crop: Astro.props.crop ?? "center",
  ar: ar ? `${ar}:1` : undefined,
  q: Astro.props.q ?? undefined,
  auto: Astro.props.auto ?? "compress,format",
  w: tWidth ?? undefined,
  h: tHeight ?? undefined,
};

const url = Astro.site ? new URL(image, Astro.site) : image;
const file = "public" + image;

let fs: any, getPlaiceholder: any;
let base64, metadata;

// @ts-expect-error
if (!ENV_BOOKSHOP_LIVE) {
  fs = await import("node:fs/promises");
  ({ getPlaiceholder } = await import("plaiceholder"));

  try {
    const f = await fs.readFile(file);

    ({ base64, metadata } = await getPlaiceholder(f));
  } catch (err) {
    console.log(err);
  } finally {
    ix = false;
  }
}

const src = ix ? ix.buildURL(url.toString(), opts) : image; // Fallback
const srcset = ix ? ix.buildSrcSet(url.toString(), opts) : undefined;

let width = tWidth || metadata?.width;
let height = ar && width ? Math.floor(width / ar) : tHeight || metadata?.height;
---

{
  placeholder && base64 && (
    <img class="placeholder" src={base64} {width} {height} />
  )
}
{
  // @ts-expect-error
  ENV_BOOKSHOP_LIVE ? (
    <img src={image} {alt} {loading} {decoding} {width} {height} />
  ) : (
    <img {srcset} {src} {alt} {loading} {decoding} {sizes} {width} {height} />
  )
}

<style>
  .placeholder {
    filter: blur(5rem);
    position: absolute;
    inset: 0;
    z-index: -1;
  }
</style>
