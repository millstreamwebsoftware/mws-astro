---
import { Markdown as RemoteMarkdown } from "astro-remote";
import { marked } from "marked";
import { gfmHeadingId } from "marked-gfm-heading-id";
import { replaceCmsEmbeds, removeHTMLWhitespace } from "@mws-astro/util";
import Blockquote from "@components/blockquote/blockquote.astro";
import Button from "@components/button/button.astro";
import Icon from "@shared/icon.astro";
import Mailbuild from "@components/mailbuild/mailbuild.astro";
import Facebook from "@components/facebook/facebook.astro";
import Social from "@components/social/social.astro";
import Counter from "@components/counter/counter.astro";
import AsideImage from "@components/image/asideImage.astro";
import Player from "@components/player/player.astro";
import Accordion from "@components/accordion/accordion.astro";
import Navigation from "@components/navigation/navigation.astro";

const content = removeHTMLWhitespace(replaceCmsEmbeds(Astro.props.content));

var substitutions = {
    Accordion,
    blockquote: Blockquote,
    Icon,
    Newsletter: Mailbuild,
    Facebook,
    Social,
    'a[class*="button"]': Button,
    Player,
    Navigation,
    img: AsideImage,
    Counter,
};

var md: string | undefined;

// @ts-ignore
if (ENV_BOOKSHOP_LIVE) {
    marked.use(gfmHeadingId())
    md = await marked.parse(content);
} else {
    // Get site specific custom snippets from src/snippets.ts
    const snippetGlob = import.meta.glob<Record<string, any>>(
        "/src/snippets.ts",
    );

    await snippetGlob?.["/src/snippets.ts"]?.()?.then(
        ({ snippets }) => Object.assign(substitutions, snippets),
        (error) => console.log(error),
    );
}
---

{
    md
        ? content && <Fragment set:html={md} />
        : content && (
              <RemoteMarkdown
                  {content}
                  sanitize={{ allowComponents: true }}
                  components={substitutions}
                  marked={{extensions: [gfmHeadingId() as any]}}
              />
          )
}
