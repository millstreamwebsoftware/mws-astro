---
import type { CollectionKey } from "astro:content";
import type { CollectionEntry } from "astro:content";
import Image from "@shared/Image.astro";
import Markdown from "@shared/Markdown.astro";
import Icon from "@shared/icon.astro";
import type { TreeNode } from "@mws-astro/middleware";

interface Props {
    card: CollectionEntry<CollectionKey> & TreeNode;
    include: string[];
    filters: string[];
    aspect?: number;
}

const { card, include, filters, aspect = 1 } = Astro.props;
const combinedCard = Object.assign(Object.assign({}, card), card.data);

const cardProps = Object.fromEntries(
    Object.entries(combinedCard).filter(([k, v]) => include.includes(k)),
);

const { title, description, thumbnail, slug, publishDate, ...cardData } =
    cardProps;
const link = slug || include.includes("link");

// Convert card props to data attributes for filtering
const filterData = Object.fromEntries(
    Object.entries(combinedCard)
        .filter(([k, v]) => filters.includes(k))
        .map(([k, v]) => {
            let filterValue;
            if (v instanceof Date) filterValue = v.getTime();
            if (Array.isArray(v))
                filterValue = v.map((v) => v.replaceAll(" ", "-")).join(" ");

            return [`data-${k}`, filterValue ?? v];
        }),
);

function formatDate(date: Date) {
    return date.toLocaleDateString("en-AU", {
        weekday: undefined,
        day: "2-digit",
        month: "long",
        year: "numeric",
    });
}
---

<div class="card-index-card" {...filterData}>
    {link && <a class="card-link" href={card?.href} />}
    {
        thumbnail && (
            <div class="card-thumbnail">
                <Image image={thumbnail} width={512} {aspect} />
            </div>
        )
    }
    <div class="card-text">
        {title && <h2>{title}</h2>}
        {description && <Markdown content={description} />}
        {publishDate && <p>{formatDate(publishDate)}</p>}
        {
            Object.entries(cardData).map(([k, v], i) => {
                let dateString;
                if (v instanceof Date) dateString = formatDate(v);
                return (
                    <div
                        class="card-data"
                        {...{
                            "data-key": k,
                            "data-value": dateString ? v.getTime() : v,
                        }}
                    >
                        <>
                            <p class="data-key">{k}</p>

                            {Array.isArray(v) ? (
                                v.map((vv) => <p class="data-value">{vv}</p>)
                            ) : (
                                <p class="data-value">{dateString ?? v}</p>
                            )}
                        </>
                    </div>
                );
            })
        }
    </div>
    {
        include.includes("read-more") && (
            <div class="card-read-more">
                <p>Read More</p>
                <Icon name="fa6-solid:arrow-right-to-bracket" height="2rem" />
            </div>
        )
    }
</div>

<style lang="scss">
    .card-index-card {
        display: grid;
        overflow: hidden;
        border-radius: var(--border-radius);
        grid-template-rows: min-content auto auto;

        position: relative;
        flex: 0 1 512px;

        // border: 2px solid rgb(var(--text-color));

        box-shadow: 0 0 1rem rgb(var(--text-color) / 0.2);

        border-radius: var(--border-radius);
        background-color: rgb(var(--background-color));

        transition:
            filter 0.4s ease,
            opacity 0.4s ease,
            transform 0.4s ease;

        &.filter-hide {
            display: none;
            // transform: scale(0.9);
            // opacity: 0.1;
            // filter: grayscale(1);
            // pointer-events: none;
            // order: 99999;
        }

        &.pagination-hide {
            display: none;
        }

        > a {
            position: absolute;
            inset: 0;
            z-index: 1;
            display: block;
            border: 4px solid transparent;
            border-radius: inherit;
            transition:
                background-color 0.2s ease-in-out,
                border 0.2s ease-in-out;
        }

        &:hover > a {
            background-color: rgb(var(--text-color) / 0.1);
            border: 4px solid rgb(var(--color-primary));
        }

        .card-text {
            padding: 2rem;
            background-color: rgb(var(--background-color));
            color: rgb(var(--text-color));
        }

        .card-read-more {
            display: flex;
            margin-top: auto;
            padding: 1rem 2rem;
            background-color: rgb(var(--color-primary));
            --text-color: 255 255 255;

            align-items: center;
            justify-content: space-between;

            p {
                margin: 0;
                font-weight: bold;
            }
        }

        .card-thumbnail {
            position: relative;
            border-bottom: 4px solid rgb(var(--color-primary));

            &::after {
                content: "";
                position: absolute;
                inset: 0;
                pointer-events: none;
                background: linear-gradient(
                    to bottom,
                    transparent 90%,
                    98%,
                    rgb(var(--color-primary) / 0.8)
                );
                z-index: 1;
            }
        }

        .card-data {
            display: flex;
            gap: 1rem;
            border-radius: var(--border-radius);
            width: min-content;
            padding: 0 1.5rem;

            &[data-value=""] {
                .data-value {
                    display: none;
                }
            }

            &[data-key]:not([data-value]) {
                display: none;
            }

            > p {
                margin: 0;
            }
        }
    }
</style>
