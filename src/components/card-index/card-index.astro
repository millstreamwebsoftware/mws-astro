---
import Section from "@layouts/Section.astro";
import Card from "@components/card-index/card.astro";
// import { type TreeNode } from "@mws-astro/middleware";

interface Props {
  target: string;
  include?: string[];
  columns?: number;
}

const tree = Astro.locals.tree;
const data = Astro.locals.collections.pages;

const {
  target = "/",
  include = ["title", "description", "thumbnail", "link"],
  columns,
} = Astro.props;

const targetFragments = target?.split("/").filter((frg) => frg !== "");
let cursor = tree;
let error;

if (targetFragments !== undefined) {
  for (let i = 0; i < targetFragments.length; i++) {
    if (
      !(cursor?.children !== undefined && targetFragments[i] in cursor.children)
    ) {
      error = `Could not resolve path ${target}`;
      break;
    }

    cursor = cursor.children[targetFragments[i]];
  }
}

const slugs =
  cursor.children &&
  Object.values(cursor.children).reduce<Set<string>>((obj, node) => {
    node?.slug !== undefined && obj.add(node?.slug);
    return obj;
  }, new Set());
const cards = slugs && data.filter((node) => slugs.has(node.slug));

cards?.sort((a, b) => a.data.order - b.data.order); // Sort in ascending order

// const cards = Object.values(cursor?.children).map((node) => {
//   return node?.slug !== undefined && node.slug in data ? data[node.slug]
// });
---

<Section component="card-index">
  <div class="card-index" style={{ "--columns": columns }}>
    {
      cards &&
        cards.map((card) => {
          return <Card {include} {card} />;
        })
    }
  </div>
</Section>

<style lang="scss">
  .card-index {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 2rem;
  }
</style>
