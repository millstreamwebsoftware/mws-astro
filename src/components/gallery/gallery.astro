---
import Lightbox from "@components/lightbox/lightbox.astro";
import Image from "@shared/Image.astro";
import Section from "@layouts/Section.astro";
import Markdown from "@shared/Markdown.astro";

type Image = {
    image: string;
    title?: string;
    description?: string;
    alt?: string;
    link?: string;
};

export interface Props {
    images: Image[];
    height: number;
    columns: number;
    gap: boolean;
    fit?: "cover" | "contain";
    aspect: number;
    indent: boolean;
    lightbox?: boolean;
    linkgallery?: boolean;
    placeholder?: boolean;
    classes?: any;
    key?: string;
}

const { height, linkgallery, key, classes } =
    Astro.props;

const images = Astro.props.images.filter((img) => !!img);
const lightbox = Astro.props.lightbox && !linkgallery;
const columns = Astro.props.columns || images.length;
const aspect = Astro.props.aspect ?? 1.0;
const gap = Astro.props.gap ?? true;
const fit = Astro.props.fit ?? "cover";
const id = `gallery-${key}`;

// const sizes = `(max-width: 768px) calc((100vw / 2) - (${
//     gap ? "2rem" : "0"
// } * 2)), calc((100vw / ${columns}) - (${gap ? "2rem" : "0"} * ${columns}))`;
---

<Section
    component="gallery"
    {...Astro.props}
    classes={[{ lightbox }, classes]}
    style={{
        "--height": height,
        "--columns": columns,
        "--aspect": aspect,
        ...(!gap && { "--gallery-gap": 0 }),
    }}
>
    <div class="gallery-grid">
        {
            images.map((asset, i) => (
                <figure class="gallery-item" data-lightbox={`${id}-${i}`}>
                    <Image
                        image={asset.image}
                        alt={asset.alt}
                        {fit}
                        width={1920 / columns}
                        quality="low"
                        densities={null}
                        placeholder={true}
                    />

                    {(asset.title || asset.description) && (
                        <figcaption>
                            {asset.title && <h3>{asset.title}</h3>}
                            {asset.description && (
                                <Markdown content={asset.description} />
                            )}
                        </figcaption>
                    )}

                    {asset?.link && linkgallery && <a href={asset.link} />}
                </figure>
            ))
        }
        {
            lightbox && (
                <Lightbox collection={id}>
                    {images.map((asset, i) => (
                        <figure
                            data-lightbox={`${id}-${i}`}
                            class:list={{
                                caption: asset.title || asset.description,
                            }}
                        >
                            <Image
                                image={asset.image}
                                alt={asset.alt}
                                fit="contain"
                                width={1920}
                                quality="high"
                                densities={null}
                            />

                            {(asset.title || asset.description) && (
                                <figcaption>
                                    {asset.title && <h3>{asset.title}</h3>}
                                    {asset.description && (
                                        <Markdown content={asset.description} />
                                    )}
                                </figcaption>
                            )}
                        </figure>
                    ))}
                </Lightbox>
            )
        }
    </div>
</Section>

<style lang="scss">
    .gallery-grid {
        grid-template-columns: repeat(var(--columns), 1fr);
        display: grid;
        grid-template-rows: 1fr;
        grid-auto-flow: row;
        gap: var(--gallery-gap);
    }

    .gallery-item a {
        position: absolute;
        inset: 0;
    }
</style>

<style lang="scss" is:global>
    section.gallery.lightbox [data-lightbox] {
        cursor: pointer;
    }

    section.gallery .gallery-grid {
        &.no-indent {
            padding: var(--gallery-gap);
        }

        .gallery-item {
            position: relative;
            z-index: 1;
            overflow: hidden;

            img {
                width: 100%;
                height: 100%;
                // object-fit: cover;
                object-position: center;
                aspect-ratio: var(--aspect);
            }

            figcaption {
                position: absolute;
                display: flex;
                flex-direction: column;
                justify-content: flex-end;
                bottom: 0;
                left: 0;
                right: 0;
                padding: 2rem;
                background: linear-gradient(
                    to right,
                    rgb(
                        var(--background-color, var(--article-background-color)) /
                            0.7
                    ),
                    rgb(
                        var(--background-color, var(--article-background-color)) /
                            0.5
                    )
                );
            }
        }
    }

    @media only screen and (max-width: 768px) {
        section.gallery .gallery-grid {
            grid-template-columns: repeat(calc(var(--columns) * 0.5), 1fr);
        }

        // section.gallery.list figure.gallery-item {
        //   grid-template-columns: 1fr;
        //   grid-template-rows: minmax(1fr, auto) auto;

        //   img {
        //     max-height: 50%;
        //   }
        // }
    }

    section.gallery.list {
        .gallery-item {
            display: grid;
            grid-template-columns: 1fr 2fr;
            border-radius: var(--border-radius);
            background-color: color-mix(
                in oklab,
                rgb(var(--background-color)) 95%,
                rgb(var(--text-color))
            );

            img {
                border-radius: var(--border-radius);
            }

            figcaption {
                position: relative;
                justify-content: start;
                background: none;
            }
        }
    }
</style>
