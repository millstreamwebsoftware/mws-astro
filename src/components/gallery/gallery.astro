---
import MarkdownIt from "markdown-it";
import Lightbox from "@components/lightbox/lightbox.astro";
// import { Image } from "astro:assets";

const md = new MarkdownIt({ html: true });

export interface Props {
  images: any[];
  height: number;
  columns: number;
  gap: boolean;
  aspect: number;
  indent: boolean;
  lightbox?: boolean;
  key?: string;
}

const { images, height, indent, lightbox, key } = Astro.props;
// const imagePaths = images.map((i) => i.image);
// const assets = await Astro.glob("/src/assets/**/*");

// const imageAssets = images.map((img) => {
//   const k = assets.findIndex((j) => j.default.src.includes(img.image));
//   const i = Object.assign({}, img);
//   if (k >= 0) i.image = assets[k].default;
//   return i;
// });

const columns = Astro.props.columns || images.length;
const aspect = Astro.props.aspect ?? 1.0;
const gap = Astro.props.gap ?? true;
const id = `gallery${key}`;
---

<section
  {id}
  class:list={["gallery", { "no-indent": !indent }, { lightbox }]}
  style={{
    "--height": height,
    "--columns": columns,
    "--aspect": aspect,
    ...(!gap && { "--gallery-gap": 0 }),
  }}
>
  {
    images.map((asset, i) => (
      <figure class="gallery-item" data-lightbox={`${id}-${i}`}>
        <img
          src={asset.image?.src || asset.image}
          alt=""
          loading="lazy"
          decoding="async"
          style={{
            ...(asset.image?.width && {
              "max-width": `${asset.image?.width}px`,
            }),
            ...(asset.image?.height && {
              "max-height": `${asset.image?.height}px`,
            }),
          }}
        />

        {(asset.title || asset.description) && (
          <figcaption>
            {asset.title && <h3>{asset.title}</h3>}
            {asset.description && (
              <div set:html={md.render(asset.description)} />
            )}
          </figcaption>
        )}
      </figure>
    ))
  }
  {
    lightbox && (
      <Lightbox collection={id}>
        {images.map((asset, i) => (
          <figure
            data-lightbox={`${id}-${i}`}
            class:list={{ caption: asset.title || asset.description }}
          >
            <img
              src={asset.image?.src || asset.image}
              alt=""
              loading="lazy"
              decoding="async"
              style={{
                ...(asset.image?.width && {
                  "max-width": `${asset.image?.width}px`,
                }),
                ...(asset.image?.height && {
                  "max-height": `${asset.image?.height}px`,
                }),
              }}
            />

            {(asset.title || asset.description) && (
              <figcaption>
                {asset.title && <h3>{asset.title}</h3>}
                {asset.description && (
                  <div set:html={md.render(asset.description)} />
                )}
              </figcaption>
            )}
          </figure>
        ))}
      </Lightbox>
    )
  }
</section>

<style lang="scss">
  section.gallery {
    grid-template-columns: repeat(var(--columns), 1fr);
  }

  .gallery {
    display: grid;
    grid-template-rows: 1fr;
    grid-auto-flow: row;
    gap: var(--gallery-gap);
  }

  .gallery.no-indent {
    padding: var(--gallery-gap);
  }

  .lightbox [data-lightbox] {
    cursor: pointer;
  }

  .gallery-item {
    position: relative;

    img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      object-position: center;
      aspect-ratio: var(--aspect);
    }

    figcaption {
      position: absolute;
      display: flex;
      flex-direction: column;
      justify-content: flex-end;
      bottom: 0;
      left: 0;
      right: 0;
      padding: 2rem;
      background: linear-gradient(
        to right,
        rgb(var(--background-color, var(--article-background-color)) / 0.7),
        rgb(var(--background-color, var(--article-background-color)) / 0.5)
      );
    }
  }

  @media only screen and (max-width: 768px) {
    section.gallery {
      grid-template-columns: repeat(2, 1fr);
    }
  }
</style>
