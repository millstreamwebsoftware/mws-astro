---
import Section from "@layouts/Section.astro";
import _preferences from "@data/preferences.json";
const preferences = _preferences as unknown as Preferences;

type EventSource =
    | {
          name?: string;
          googleCalendarId: string;
          className?: string;
          id?: string;
      }
    | { name?: string; url: string; className?: string; id?: string };

type ToolBar = { start?: string; center?: string; end?: string };

export interface Props {
    calendarEvents: [EventSource];
    classes?: any;
    key?: string;
}

const { calendarEvents, classes, key } = Astro.props;

// const customButtons: Record<string, any> = {};
const filterButtons: Record<string, any> = {};
const subscribeButtons: Record<string, any> = {};

const headerToolbar: ToolBar = {
    start: "title",
    center: "",
    end: "prev,today,next dayGridMonth,listWeek",
};

const footerToolbar: ToolBar = {};

for (let i = 0; i < calendarEvents.length; i++) {
    let cid = `cal${i}`;
    calendarEvents[i].className = cid;
    calendarEvents[i].id = cid;
    filterButtons[`${cid}-filter`] = { text: calendarEvents[i].name };
    subscribeButtons[`${cid}-subscribe`] = { text: calendarEvents[i].name };
}

if (Object.keys(filterButtons).length - 1) {
    headerToolbar.center = Object.keys(filterButtons).join(" ");
}

footerToolbar.start = Object.keys(subscribeButtons).join(" ");

const calendarOptions = {
    calendarEvents,
    customButtons: Object.assign(filterButtons, subscribeButtons),
    headerToolbar,
    footerToolbar,
};
---

<Section component="calendar" classes={{ ...classes }} {...Astro.props}>
    <script
        is:inline
        id={`calendar-events-${key}`}
        class="calendar-events"
        set:html={JSON.stringify(calendarOptions)}
        type="application/json"
    />
    <div
        id={`_calendar-${key}`}
        class="_calendar"
        data-api-key={preferences.API?.google_calendar?.api_key}
    >
    </div>
</Section>

<script>
    import {
        // Calendar,
        type EventClickArg,
        type EventApi,
        type ViewApi,
    } from "@fullcalendar/core";
    // import dayGridPlugin from "@fullcalendar/daygrid";
    // import listPlugin from "@fullcalendar/list";
    // import googleCalendarPlugin from "@fullcalendar/google-calendar";
    import {
        computePosition,
        type ComputePositionConfig,
        autoUpdate,
        offset,
        shift,
        flip,
    } from "@floating-ui/dom";
    // import { createEvent } from "ics";
    
    
    var Calendar: any;
    var dayGridPlugin: any;
    var listPlugin: any;
    var googleCalendarPlugin: any;
    var createEvent: Function | undefined;
    
    async function importCalendar() {
      if (Calendar && dayGridPlugin && listPlugin && googleCalendarPlugin && createEvent) return;
      
      const fullCalendar = await import("@fullcalendar/core");
      ({Calendar} = fullCalendar);
      
      dayGridPlugin = (await import("@fullcalendar/daygrid")).default;
      listPlugin = (await import("@fullcalendar/list")).default;
      googleCalendarPlugin = (await import("@fullcalendar/google-calendar")).default;
      
      const ics = await import("ics");
      ({createEvent} = ics);
    }
    

    document.addEventListener("DOMContentLoaded", setupCalendar);
    document.addEventListener("astro:after-swap", setupCalendar);

    async function setupCalendar() {
        var calendarSections = document.querySelectorAll(
            'section[data-component="calendar"]',
        );
        
        if (!calendarSections.length) return;
        
        await importCalendar();

        calendarSections.forEach((section) => {          
            const calendarEl = section.querySelector(
                "._calendar",
            ) as CalendarElement;
            if (!calendarEl) return;
            const apiKey = calendarEl.dataset?.apiKey;

            if (!apiKey) return;
            const calendarSourceEl = calendarEl.parentElement?.querySelector(
                ":scope script.calendar-events",
            );
            if (!calendarSourceEl) return;
            const calendarOptions = JSON.parse(
                calendarSourceEl.innerHTML || "{}",
            );
            const customButtons = calendarOptions.customButtons;

            Object.entries(customButtons).forEach(
                ([buttonName, button]: [string, any]) => {
                    if (buttonName.endsWith("-filter")) {
                        button.click = function (
                            _event: MouseEvent,
                            element: HTMLElement,
                        ) {
                            element.classList.toggle("cal-filter");
                            filterEvents(calendarEl);
                        };
                    } else if (buttonName.endsWith("-subscribe")) {
                        const calendarId =
                            buttonName.match(/^(\w*)-subscribe$/)?.[1];
                        const source = calendarOptions.calendarEvents.find(
                            (source: EventApi) => source?.id === calendarId,
                        );
                        if (!source) return;
                        let subscribeURL = "";

                        if (source.googleCalendarId) {
                            subscribeURL =
                                "webcal://calendar.google.com/calendar/ical/" +
                                source.googleCalendarId.replace(/@/, "%40") +
                                "/public/basic.ics";
                        } else if ((source.format = "ics")) {
                            subscribeURL = source.url.replace(
                                /^https?/,
                                "webcal",
                            );
                        }

                        if (!subscribeURL) return;

                        button.click = function () {
                            // navigate(subscribeURL);
                            const subscribeAnchor = document.createElement("a");
                            subscribeAnchor.setAttribute("href", subscribeURL);
                            subscribeAnchor.click();
                        };
                    }
                },
            );

            var calendar = new Calendar(calendarEl, {
                plugins: [dayGridPlugin, listPlugin, googleCalendarPlugin],
                initialView: "dayGridMonth",
                googleCalendarApiKey: apiKey,
                eventSources: calendarOptions.calendarEvents,
                eventClick: onClick,
                eventClassNames: function (arg: { event: any }) {
                    if (!calendarEl.dataset.filter) return "";
                    if (
                        calendarEl.dataset.filter?.includes(arg.event.source.id)
                    )
                        return "";
                    return "filter-hidden";
                    // e.el.classList.add("filter-hidden");
                },
                windowResize: function (arg: { view: ViewApi }) {
                    arg.view.calendar.setOption("height", getCalendarHeight());
                },
                customButtons,
                headerToolbar: calendarOptions.headerToolbar,
                footerToolbar: calendarOptions.footerToolbar,
                aspectRatio: 1.77,
                height: getCalendarHeight(),
            });            
            calendarEl.calendar = calendar;
            calendar.render();
        });
    }

    function getCalendarHeight() {
        return window.screen.width > 768 ? undefined : "auto";
    }

    function closeCalendarPopup(e: MouseEvent) {
        if (!e.target) return;
        if ((e.target as HTMLElement).closest("#calendar-popup")) return;

        document.getElementById("calendar-popup")?.remove();
        document.removeEventListener("click", closeCalendarPopup);
    }

    function onClick({ event, el, jsEvent }: EventClickArg) {
        jsEvent.preventDefault();
        jsEvent.stopImmediatePropagation();
        const calendarEl = el.closest("._calendar") as CalendarElement;
        if (!calendarEl) return;
        if (!event.start || !event.end) return;

        const popup = document.createElement("div");

        popup.classList.add(
            ...Array.from(el.classList.values()).filter(
                (cl) => !cl.startsWith("fc-"),
            ),
        );
        let offsetEnd = new Date(event.end.valueOf() - 1); // Prevent date rolling over when event ends at midnight

        let fromTime = event.allDay
            ? ""
            : " " + event.start.toLocaleTimeString();
        let toTime = event.allDay ? "" : " " + event.end.toLocaleTimeString();
        let fromDate = event.start.toLocaleDateString();
        let toDate =
            offsetEnd.toLocaleDateString() != fromDate
                ? offsetEnd.toLocaleDateString()
                : "";
        let timeString =
            toDate || toTime
                ? `${fromDate}${fromTime} - ${toDate}${toTime}`
                : `${fromDate}${fromTime}`;

        popup.id = "calendar-popup";
        popup.innerHTML = `<h3 class="event-title">${event.title}</h3>
    <p class="event-time">${timeString}</p>
    <div class="event-links">
      <a href="${event.url}" target="_blank" rel="noopener noreferrer">Open Link</a>
      <a href="${downloadEvent(event)}" download="${
          event.title
      }.ics">Download Event</a>
    </div>`;

        document.getElementById("calendar-popup")?.remove();
        document.addEventListener("click", closeCalendarPopup);
        calendarEl.append(popup);

        const options: ComputePositionConfig = {
            placement: "top",
            middleware: [offset(10), flip(), shift({ padding: 20 })],
        };

        (el as FloatingUIElement)._cleanup = autoUpdate(el, popup, () => {
            computePosition(el, popup, options).then(({ x, y }) => {
                Object.assign(popup.style, {
                    left: `${x}px`,
                    top: `${y}px`,
                });
            });
        });
    }

    function filterEvents(calendar: CalendarElement) {
        const buttons = calendar.querySelectorAll(
            ":scope > .fc-toolbar .fc-button.cal-filter",
        );

        const filters = Array.from(buttons).map((e) => {
            return e.classList
                .toString()
                .match(/\bfc-(\w*)-filter-button\b/)?.[1];
        });

        calendar.dataset.filter = filters.join(" ");
        calendar.calendar.render();
    }

    function downloadEvent(e: EventApi) {
        let icalString: string = "";
        let source: string;

        // Calendar IDs should be unique, add hostname as a suffix
        if (e.source?.url) {
            source = new URL(e.source.url).hostname;
        } else {
            source = "group.calendar.google.com";
        }

        if (!(e.start && e.end)) return;

        let event = {
            start: e.start.getTime(),
            end: e.end.getTime(),
            title: e.title,
            url: e.url,
            uid: e.id + "@" + source,
        };

        createEvent?.(event, (error: any, value: any) => {
            if (error) {
                console.log(error);
                return;
            }

            icalString = value;
        });

        if (!icalString) return;
        const blob = new Blob([icalString], { type: "text/calendar" });
        const url = URL.createObjectURL(blob);
        return url;
    }
</script>

<style lang="scss" is:global>
    #calendar-popup {
        position: absolute;
        z-index: 100;
        background-color: rgb(
            var(--background-color, var(--page-background-color))
        );
        color: rgb(var(--text-color));
        border-radius: var(--border-radius);
        padding: 2rem;
        box-shadow: 0.5rem 0.5rem 1rem #00000033;
        border: 1px solid rgb(var(--calendar-color));
        border-left: 5px solid rgb(var(--calendar-color));

        h3 {
            max-width: 400px;
        }

        .event-links {
            display: flex;
            flex-direction: row;
            gap: 1rem;
            justify-content: space-between;
        }
    }

    .fc .fc-dayGridMonth-view .fc-event:not(.fc-daygrid-dot-event) {
        border-radius: var(--border-radius);
        font-family: var(--font-family);
        padding: 0.2em 0.4em;

        .fc-event-title {
            color: rgb(var(--calendar-contrast-color, var(--text-color)));
            // filter: invert(1) grayscale(1) contrast(999);
            font-weight: bold;
        }

        .fc-event-time {
            font-weight: 400;
            flex-shrink: 0;
        }

        &:not(.fc-event-start) {
            border-radius: 0 var(--border-radius) var(--border-radius) 0;
            mask-image: linear-gradient(to right, transparent, white 2rem);
            padding-left: 2rem;
        }

        &:not(.fc-event-end) {
            border-radius: var(--border-radius) 0 0 var(--border-radius);
            mask-image: linear-gradient(to right, white calc(100% - 2rem), transparent);
            padding-right: 2rem;
        }
        
        &:not(.fc-event-start):not(.fc-event-end) {
            border-radius: 0;
             mask-image: linear-gradient(to right, transparent, white 2rem, white calc(100% - 2rem), transparent);
        }
    }

    .fc-event-selected::after,
    .fc-event:focus::after {
        border-radius: var(--border-radius);
    }

    .fc-event {
        --fc-event-border-color: rgb(var(--calendar-color));
        --fc-event-bg-color: rgb(var(--calendar-color));
        transition: opacity 0.1s ease-in-out;
    }

    .fc-event.filter-hidden {
        opacity: 0.2;
    }

    .fc-toolbar-chunk:has(.cal-filter) .fc-button:not(.cal-filter) {
        opacity: 0.2;
    }

    .fc-button.cal-filter {
        opacity: 1;
    }

    .fc-toolbar-chunk {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        gap: 1rem;
        padding-left: 1rem;
        padding-right: 1rem;

        & > button.fc-button.fc-button-primary {
            margin-left: 0;
        }

        & > div.fc-button-group.fc-button-group {
            margin-left: 0;
        }
    }

    .fc-header-toolbar {
        @media only screen and (max-width: 768px) {
            flex-direction: column;
            flex-wrap: wrap;
            gap: 1rem;
        }
    }

    .fc-header-toolbar.fc-toolbar .fc-toolbar-chunk:last-child {
        justify-content: end;
    }

    .fc-toolbar-chunk:has(.fc-button[class*="-subscribe"])::before {
        content: "Subscribe To:";
        padding: 0.4em 0.65em;
        color: rgb(var(--text-color));
    }

    .fc-toolbar-chunk .fc-button[class*="-subscribe"] {
        background-color: transparent;
        color: rgb(var(--text-color));

        &::before {
            content: "";
            display: inline-block;
            border: 4px solid rgb(var(--calendar-color));
            border-radius: 4px;
            width: 0;
            height: 0;
            padding: 0;
            line-height: 0;
            margin-right: 0.5rem;
        }
    }

    .fc-button[class*="-filter"] {
        --fc-button-bg-color: rgb(var(--calendar-color));
        --fc-button-hover-bg-color: color-mix(
            in oklch,
            rgb(var(--calendar-color)) 80%,
            black
        );
        color: rgb(var(--calendar-contrast-color, var(--text-color)));
        transition: opacity 0.1s ease-in-out;
    }

    .fc-icon {
        line-height: 0.7;
    }
    
    .fc-event, .fc-button {
        --calendar-contrast-color: 0 0 0;
        --calendar-color: 210 210 210;
    }

    .cal0,
    .fc-button[class*="fc-cal0"] {
        --calendar-contrast-color: 255 255 255;
        --calendar-color: 255 89 94;
    }
    .cal1,
    .fc-button[class*="fc-cal1"] {
        --calendar-contrast-color: 0 0 0;
        --calendar-color: 255 202 58;
    }
    .cal2,
    .fc-button[class*="fc-cal2"] {
        --calendar-contrast-color: 0 0 0;
        --calendar-color: 138 201 38;
    }
    .cal3,
    .fc-button[class*="fc-cal3"] {
        --calendar-contrast-color: 255 255 255;
        --calendar-color: 25 130 196;
    }
    .cal4,
    .fc-button[class*="fc-cal4"] {
        --calendar-contrast-color: 255 255 255;
        --calendar-color: 106 76 147;
    }
</style>
