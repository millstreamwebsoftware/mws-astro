---
import { bookshopName } from "@mws-astro/util";
import Icon from "@shared/icon.astro";

export interface Props {
  title: string;
  items: any[];
  horizontal?: boolean;
  selected?: "selected" | "ancestor" | false;
  key: string;
}

const { title, items, horizontal = false, selected, key } = Astro.props;

const components: Record<string, any> = {};
const componentImports = import.meta.glob(
  ["/src/mws-astro/src/components/navigation/**/*.astro"],
  {
    eager: true,
  },
);

const componentOverrides = import.meta.glob(
  ["/src/components/navigation/**/*.astro"],
  {
    eager: true,
  },
);

Object.entries(componentImports).forEach(
  ([path, obj]: [string, any]) =>
    (components[bookshopName(path)] = obj.default),
);

Object.entries(componentOverrides).forEach(
  ([path, obj]: [string, any]) =>
    (components[bookshopName(path)] = obj.default),
);
---

<div
  id={key}
  class:list={["dropdown", { selected }]}
  aria-labelledby={`${key}-label`}
  aria-haspopup="menu"
  data-placement={horizontal ? "right-start" : "bottom-start"}
  tabindex="0"
>
  <span id={`${key}-label`} class="dropdown-label"
    >{title}<Icon name="carbon:caret-down" height="1em" /></span
  >
  <div class="dropdown-arrow"></div>
  <div class="dropdown-items">
    {
      items.map((item: any, i: number) => {
        var Component = components[item._bookshop_name];
        let horizontal = undefined;
        if (item._bookshop_name === "navigation/dropdown") {
          Component = Astro.self;
          horizontal = true;
        }
        if (Component) {
          return (
            <Component
              {...item}
              {horizontal}
              key={(key || "") + "-" + i.toString()}
            />
          );
        }
      })
    }
  </div>
</div>

<script>
  import {
    computePosition,
    type ComputePositionConfig,
    type Placement,
    autoUpdate,
    offset,
    shift,
    flip,
    size,
    arrow,
    type SizeOptions,
  } from "@floating-ui/dom";

  const dropdowns = Array.from(
    document.querySelectorAll<HTMLElement>(".dropdown"),
  );

  const navigation = document.getElementById("navigation");
  // if (!navigation) return;

  if (navigation) {
    document.body.addEventListener("click", handleNavigationEvent);
    document.body.addEventListener("keydown", handleNavigationEvent);
    navigation.addEventListener("focusout", handleNavigationEvent);
  }

  // setupDropdowns();
  // function setupDropdowns() {}

  function isMobileNav(): boolean {
    return document.body.classList.contains("mobile-nav");
  }

  /**
   * Close the dropdown of a given element, and cleanup
   * @param target element to close the dropdown of
   */
  function closeDropdown(dropdown: HTMLElement) {
    if ("_cleanup" in dropdown && dropdown._cleanup instanceof Function) {
      dropdown._cleanup();
    }
  }

  /**
   * Close all dropdowns decending from target
   * @param target defaults to navigation if unset
   * @param inverse close all dropdowns outside of target
   */
  function closeAllDropdowns(
    target?: HTMLElement | undefined,
    inverse: boolean = false,
  ) {
    dropdowns
      .filter((dropdown) =>
        target
          ? inverse
            ? !dropdown.contains(target)
            : target.contains(dropdown)
          : true,
      )
      .forEach(closeDropdown);
  }

  /**
   * Open the dropdown of the target element
   * @param target element to open the dropdown of
   * @param dropdownElement dropdown to open (optional)
   */
  function openDropdown(dropdown: FloatingUIElement) {
    // Close all dropdowns that do not contain the new dropdown
    closeAllDropdowns(dropdown, true);

    // const dropdown =
    //   dropdownElement ?? target.querySelector<HTMLElement>(":scope ul");
    // if (!dropdown) return;
    // const caret = dropdown.querySelector<HTMLElement>(
    //   ":scope > .dropdown-caret",
    // );

    const dropdownItems = dropdown.querySelector<HTMLElement>(
      ":scope > .dropdown-items",
    );
    if (!dropdownItems) return;

    const options: ComputePositionConfig = dropdownOptions(
      dropdown,
      dropdownItems,
    );

    const cleanup = autoUpdate(dropdown, dropdownItems, () => {
      computePosition(dropdown, dropdownItems, options).then(
        ({ x, y, middlewareData, placement }) => {
          if (document.body.classList.contains("mobile-nav")) {
            Object.assign(dropdownItems.style, {
              left: null,
              top: null,
            });

            dropdown.classList.remove("floating");
            return;
          }

          Object.assign(dropdownItems.style, {
            left: `${x}px`,
            top: `${y}px`,
          });

          dropdown.classList.add("floating");

          if (middlewareData.arrow && caret) {
            const direction = placement.replace(/-.*/, "") as
              | "top"
              | "left"
              | "right"
              | "bottom";
            const directions = ["top", "right", "bottom", "left"];
            const toPx = (i?: number) => (i ? `${i}px` : undefined);
            const d = (dir: "top" | "left" | "right" | "bottom") =>
              dir === direction;
            const computedStyles = window.getComputedStyle(
              caret.parentElement!,
            );
            const borderWidth = computedStyles.borderWidth
              .split(" ")
              .map(parseLength);
            const sideBorderWidth =
              borderWidth.length === 1
                ? borderWidth[0]
                : borderWidth[(directions.indexOf(direction) + 2) % 4];
            const caretOffset = -(caretHeight + sideBorderWidth);

            Object.assign(caret.style, {
              transform: `rotate(${{ bottom: 0, left: 0.25, top: 0.5, right: 0.75 }[direction]}turn)`,
              top:
                ((d("left") || d("right")) && toPx(middlewareData.arrow.y)) ||
                (d("bottom") && toPx(caretOffset)),
              right: d("left") && toPx(caretOffset),
              bottom: d("top") && toPx(caretOffset),
              left:
                ((d("top") || d("bottom")) && toPx(middlewareData.arrow.x)) ||
                (d("right") && toPx(caretOffset)),
            });
          }
        },
      );
    });

    dropdown._cleanup = () => {
      cleanup();

      dropdown.classList.remove("dropdown-open");
      dropdown.setAttribute("aria-expanded", "false");
      dropdownItems.setAttribute("style", "");
    };

    dropdown.setAttribute("aria-expanded", "true");
    dropdown.classList.add("dropdown-open");
  }

  function dropdownOptions(
    target: HTMLElement,
    dropdown: HTMLElement,
    caret?: HTMLElement | null,
  ): ComputePositionConfig {
    const placement = target.dataset.placement || "bottom-start";
    const vertical =
      placement?.startsWith("bottom") || placement?.startsWith("top");
    const caretOffset = caret ? caretHeight * 0.9 : 0;
    var dropdownMainOffset = 0,
      dropdownCrossOffset = 0;

    if (!vertical) {
      const dropdownComputedStyles = window.getComputedStyle(dropdown);

      dropdownMainOffset = parseLength(dropdownComputedStyles.paddingRight);
      dropdownCrossOffset = parseLength(dropdownComputedStyles.paddingTop);
    }

    const resizeHandler: SizeOptions["apply"] = ({
      rects,
      elements,
      availableHeight,
    }) => {
      if (isMobileNav()) {
        Object.assign(elements.floating.style, {
          maxHeight: null,
          minWidth: null,
        });
        return;
      }
      Object.assign(elements.floating.style, {
        maxHeight: `${availableHeight}px`,
        minWidth: `${rects.reference.width}px`,
      });
    };

    return {
      placement,
      strategy: "fixed",
      middleware: [
        offset({
          mainAxis: caretOffset + dropdownMainOffset,
          crossAxis: -dropdownCrossOffset,
        }),
        size({ apply: resizeHandler, padding: 10 }),
        shift({ padding: 10 }),
        !vertical && flip(),
        caret && arrow({ element: caret }),
      ],
    };
  }

  /**
   * Attempt to convert a css length value (px) to a number, otherwise return 0
   * @param length css pixel length string
   */
  function parseLength(length: string) {
    if (length.endsWith("px")) return Number.parseInt(length);
    console.warn(`String '${length}' could not be parsed as a length.`);
    return 0;
  }

  /**
   * Update dropdown state after event
   * @param this
   * @param e
   */
  function handleNavigationEvent(this: HTMLElement, e: Event) {
    if (e instanceof FocusEvent && e.type === "focusout") {
      if (e.relatedTarget && !navigation?.contains(e.relatedTarget as Element))
        closeAllDropdowns();
      return;
    }

    if (e instanceof KeyboardEvent) {
      switch (e.key) {
        case "Escape":
          closeAllDropdowns();

        default:
          return;

        case " ":
        case "Enter":
      }
    }

    const target: HTMLElement | null = (e.target as HTMLElement).closest(
      ".dropdown, .dropdown-items, #navigation",
    );

    if (!target || target.id === "navigation") {
      closeAllDropdowns();
      return;
    } else if (target.classList.contains("dropdown-items")) {
      return;
    }

    const state = !target.classList.contains("dropdown-open");

    if (state) {
      openDropdown(target);
    } else {
      // closeDropdown(target);
      closeAllDropdowns(target);
    }
  }
</script>

<style>
  .dropdown {
    position: relative;
    display: block;
    height: 100%;

    & > .dropdown-items {
      display: none;
      top: 0;

      flex-direction: column;

      gap: 0.5rem;
      padding: 1rem;
    }

    &.floating > .dropdown-items {
      position: fixed;
      box-shadow: 2px 2px 16px #00000044;
      background-color: rgb(var(--header-background-color));
      border: var(--header-border-width) solid rgb(var(--header-border-color));
      border-radius: var(--header-border-radius);
    }

    &.dropdown-open > .dropdown-items {
      display: flex;
    }

    .dropdown-label {
      user-select: none;
      display: flex;
      justify-content: space-between;
      align-items: center;
      height: 100%;
      gap: 0.5em;

      color: rgb(var(--header-color));
      font-size: var(--header-font-size);
      padding: var(--header-item-padding);
      border-radius: var(--header-item-border-radius);
      letter-spacing: 0.08ex;

      &:hover {
        color: rgb(var(--header-hover-color));
        background-color: rgb(var(--header-hover-background-color));
      }
    }

    &.selected > .dropdown-label {
      font-weight: bold;
      letter-spacing: 0;
    }
  }
</style>
