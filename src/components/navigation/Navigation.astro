---
import Section from "@layouts/Section.astro";
import { getTreeNode } from "@mws-astro/util";
import type { TreeNode } from "@mws-astro/middleware";

interface Props {
    tree?: TreeNode;
    collection?: string;
    maxDepth?: number;
    filter?: string;
    depth?: number;
}

const depth = (Astro.props.depth ?? -1) + 1;
const { maxDepth = Infinity, filter, collection } = Astro.props;
const tree = Astro.props.tree ?? getTreeNode(Astro.locals.tree, filter);

// console.log(filter, tree);

const ComponentWrapper = depth ? Fragment : Section;
const Wrapper = depth ? Fragment : "nav";
---

<ComponentWrapper component="navigation" {...Astro.props}>
    <Wrapper>
        {
            tree?.children != undefined &&
                Object.entries(tree.children).map(([id, child], i) => {
                    if (collection && child.collection != collection) return;
                    // const ChildTag = child.href != undefined ? "a" : Fragment;
                    const hasChildren =
                        child.children && Object.keys(child.children).length;

                    // console.log(
                    //     id,
                    //     child.children,
                    //     child.children &&
                    //         Object.keys(child.children).length,
                    // );
                    return (
                        <>
                            <div
                                data-depth={depth}
                                class:list={{ "has-children": hasChildren }}
                            >
                                <a
                                    href={
                                        child.href !== undefined
                                            ? `/${child?.href}`
                                            : undefined
                                    }
                                    aria-selected={
                                        child.selected === 2 ? "true" : "false"
                                    }
                                >
                                    {child.title}
                                </a>
                                {hasChildren && depth < maxDepth && (
                                    <div class="children">
                                        <Astro.self
                                            tree={child}
                                            {depth}
                                            {maxDepth}
                                        />
                                    </div>
                                )}
                            </div>
                        </>
                    );
                })
        }
    </Wrapper>
</ComponentWrapper>

<style>
    a {
        display: block;
        font-size: var(--text-size-medium);
        text-decoration: none;
    }
</style>
