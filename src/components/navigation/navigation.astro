---
import Section from "@layouts/Section.astro";
import { getTreeNode } from "@mws-astro/util";
import type { TreeNode } from "@mws-astro/middleware";
import Icon from "@shared/icon.astro";

interface Props {
    tree?: TreeNode;
    collection?: string;
    maxDepth?: number;
    filter?: string;
    depth?: number;
    parent?: boolean;
    hide_cousins?: boolean;
    icon?: string;
}

// console.log(Astro.locals.path, Astro.locals.path?.replace(/^(.*)\/.*?$/, "$1"));

const depth = (Astro.props.depth ?? -1) + 1;
const {
    maxDepth = 1,
    // filter = Astro.locals.path
    //     ? Astro.locals.path?.replace(/^(.*)\/.*?$/, "$1")
    //     : undefined,
    filter = undefined,
    collection,
    parent = true,
    hide_cousins = false,
    icon = "",
} = Astro.props;

// console.log(Astro.locals.path);


let tree = Astro.props.tree ?? undefined;
// @ts-ignore
if (!ENV_BOOKSHOP_LIVE && !tree) {
    // Get this page to check if it has children
    if (!filter) tree = getTreeNode(Astro.locals.tree, ".", Astro.locals.path, false);
    
    tree = getTreeNode(Astro.locals.tree, filter ?? tree?.children ? "." : "..", Astro.locals.path, parent);
}
const ComponentWrapper = depth ? Fragment : Section;
const Wrapper = depth ? Fragment : "nav";
---

<ComponentWrapper component="navigation" {...Astro.props}>
    <Wrapper>
        {
            tree?.children != undefined &&
                Object.entries(tree.children).map(([, child]) => {
                    if (collection && child.collection != collection) return;

                    const hasChildren =
                        child.children && Object.keys(child.children).length;
                    
                    // Don't render meta nodes without online children
                    if (child.status !== "online" && !hasChildren && !child.href) return;

                    const displayChildren =
                        depth < maxDepth &&
                        hasChildren &&
                        (hide_cousins // Don't render children of unselected nodes
                            ? child?.selected == undefined || child?.selected
                            : true);

                    let link =
                        child.href ??
                        (child.children && // Redirect to first child page if no page exists and not rendering children
                            !displayChildren &&
                            Object.values(child.children)[0]?.href) ?? child.link;

                    return (
                        <>
                            <div
                                data-depth={depth}
                                class:list={{ "has-children": displayChildren }}
                            >
                                <a
                                    href={link || undefined}
                                    aria-selected={
                                        child.selected === 2 ? "true" : "false"
                                    }
                                >
                                    {icon && <Icon name={icon} height="1em" />}
                                    {child.title}
                                </a>
                                {!!displayChildren && (
                                    <div class="children">
                                        <Astro.self
                                            tree={child}
                                            {depth}
                                            {maxDepth}
                                            {hide_cousins}
                                            {icon}
                                        />
                                    </div>
                                )}
                            </div>
                        </>
                    );
                })
        }
    </Wrapper>
</ComponentWrapper>

<style>
    a {
        display: block;
        font-size: var(--text-size-medium);
        text-decoration: none;
    }
</style>

<style lang="scss" is:global>
    section.navigation svg {
        justify-self: center;
        height: 100%;
    }
</style>
