---
import {
  default as Section,
  type Props as SectionProps,
} from "@layouts/Section.astro";
import Icon from "@shared/icon.astro";
import {
  getTree,
  urlToId,
  type TreeNode,
  getTreeNode,
} from "@mws-astro/navigation";
import { getCollection, type CollectionKey } from "astro:content";

interface Props extends Partial<SectionProps> {
  path?: string;
  tree?: TreeNode<CollectionKey>;
  collection?: CollectionKey;
  maxDepth?: number;
  filter?: string;
  depth?: number;
  parent?: boolean;
  hide_cousins?: boolean;
  show_home?: boolean;
  icon?: string;
}

const depth = (Astro.props.depth ?? -1) + 1;
const {
  path = Astro.props.filter || "..",
  maxDepth = 2,
  collection = "pages",
  parent = true,
  hide_cousins = false,
  show_home = false,
  icon = "",
} = Astro.props;

// const tree = await getPageChildren(urlToId(Astro.request.url), collection);
const currentPath = urlToId(Astro.request.url);

const tree =
  Astro.props.tree ??
  getTreeNode(
    getTree(await getCollection(collection), {
      select: currentPath,
    }),
    path,
    currentPath,
  );

function isRenderedItem(item: TreeNode<CollectionKey>) {
  switch (item.data?.status) {
    default:
    case "online":
      return true;
    case "meta":
      if ((item.children && Object.keys(item.children).length && Object.values(item.children).some(isRenderedItem)) || item.link) return true;
    case "hidden":
    case "offline":
      return false;
  }
}

const ComponentWrapper = depth ? Fragment : Section;
const Wrapper = depth ? Fragment : "nav";
---

<ComponentWrapper component="navigation" {...Astro.props}>
  <Wrapper>
    {
      parent && tree && ("link" in tree || "data" in tree) && (
        <div data-depth={depth - 1}>
          <a
            href={tree?.link}
            aria-selected={tree.selected === "selected" ? "true" : "false"}
          >
            {icon && <Icon name={icon} height="1em" />}
            {tree.data?.title}
          </a>
        </div>
      )
    }
    {
      tree?.children !== undefined &&
        Object.entries(tree.children).map(([, child]) => {
          if (collection && child.collection != collection) return;
          if (child.id === "" && !show_home) return;

          const hasChildren =
            child.children && Object.keys(child.children).length;

          if (!isRenderedItem(child)) return;

          const displayChildren =
            depth < maxDepth - 1 &&
            hasChildren &&
            (hide_cousins // Don't render children of unselected nodes
              ? child?.selected === undefined || child?.selected
              : true);

          const selected = child.selected === "selected";
          const link = child.link || (hasChildren && !displayChildren && Object.values(child.children!)[0].link) || undefined;
          const external = link && /^[A-z1-9+.-]*:\/\/.*/.test(link);

          return (
            <>
              <div
                data-depth={depth}
                class:list={{ "has-children": displayChildren }}
              >
                <a
                  href={link}
                  aria-selected={selected}
                  class:list={[{ selected }]}
                >
                  {icon && <Icon name={icon} height="1em" />}
                  {child.data?.title}
                  {external && <Icon name="carbon:launch" height="1em" />}
                </a>
                {!!displayChildren && (
                  <div class="children">
                    <Astro.self
                      tree={child}
                      {depth}
                      {maxDepth}
                      {hide_cousins}
                      {icon}
                      parent={false}
                    />
                  </div>
                )}
              </div>
            </>
          );
        })
    }
  </Wrapper>
</ComponentWrapper>

<style>
  :where(a) {
    display: block;
    font-size: var(--text-size-medium);
    text-decoration: none;

    &.selected {
      font-weight: bold;
    }
  }
</style>

<style lang="scss" is:global>
  section.navigation {
    :where(nav) .children {
      margin-left: 2rem;
    }

    svg {
      justify-self: center;
      height: 100%;
    }
  }

  /* Editor Fallback */
  navigation {
    display: block;
    border: 1px solid grey;
    background-color: white;
    border-radius: 0.5rem;
    padding: 1rem 2rem;

    &::before {
      content: "ðŸ§­ Navigation";
      font-size: var(--text-size-medium);
    }
  }
</style>
