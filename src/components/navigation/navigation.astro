---
import Section from "@layouts/Section.astro";
import { getTreeNode } from "@mws-astro/util";
import type { TreeNode } from "@mws-astro/middleware";

interface Props {
    tree?: TreeNode;
    collection?: string;
    maxDepth?: number;
    filter?: string;
    depth?: number;
    parent?: boolean;
    hide_cousins?: boolean;
}

const depth = (Astro.props.depth ?? -1) + 1;
const {
    maxDepth = 1,
    filter = Astro.locals.path
        ? Astro.locals.path?.replace(/^(.*)\/.*?$/, "$1")
        : undefined,
    collection,
    parent = true,
    hide_cousins = false,
} = Astro.props;

let tree;
// @ts-ignore
if (!ENV_BOOKSHOP_LIVE) {
    tree = Astro.props.tree ?? getTreeNode(Astro.locals.tree, filter, parent);
}
const ComponentWrapper = depth ? Fragment : Section;
const Wrapper = depth ? Fragment : "nav";
---

<ComponentWrapper component="navigation" {...Astro.props}>
    <Wrapper>
        {
            tree?.children != undefined &&
                Object.entries(tree.children).map(([id, child], i) => {
                    if (collection && child.collection != collection) return;

                    const hasChildren =
                        child.children && Object.keys(child.children).length;

                    const displayChildren =
                        depth < maxDepth &&
                        hasChildren &&
                        (hide_cousins // Don't render children of unselected nodes
                            ? child?.selected == undefined || child?.selected
                            : true);

                    let link =
                        child.href ??
                        (child.children && // Redirect to first child page if no page exists and not rendering children
                            !displayChildren &&
                            Object.values(child.children)[0]?.href);

                    return (
                        <>
                            <div
                                data-depth={depth}
                                class:list={{ "has-children": hasChildren }}
                            >
                                <a
                                    href={link || undefined}
                                    aria-selected={
                                        child.selected === 2 ? "true" : "false"
                                    }
                                >
                                    {child.title}
                                </a>
                                {!!displayChildren && (
                                    <div class="children">
                                        <Astro.self
                                            tree={child}
                                            {depth}
                                            {maxDepth}
                                            {hide_cousins}
                                        />
                                    </div>
                                )}
                            </div>
                        </>
                    );
                })
        }
    </Wrapper>
</ComponentWrapper>

<style>
    a {
        display: block;
        font-size: var(--text-size-medium);
        text-decoration: none;
    }
</style>
