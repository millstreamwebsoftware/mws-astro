---
import Section from "@layouts/Section.astro";
import preferences from "@data/preferences.json";

export interface props {
  lat: number;
  lng: number;
  zoom?: number;
  mapType?: string;
  mapId?: string;
  marker?: boolean;
  height: number;
  style?: string;
  indent?: boolean;
  key?: string;
}

// @ts-ignore
const bookshop: boolean = ENV_BOOKSHOP_LIVE;
const { lat, lng, zoom, marker, key, indent, mapId, style } = Astro.props;

let styles;
if (!bookshop) {
  // Import map styles from src/styles/<name>.map.json
  styles = Object.entries(await Astro.glob("@custom/*.map.json")).reduce<
    Record<string, any>
  >((i, n) => {
    let name = n[0]
      .split("/")
      .at(-1)
      ?.match(/(.*)\.map\.json$/)?.[1];
    if (!name) return i;
    i[name] = n[1];
    return i;
  }, {});
}

let mapStyle;
if (styles && (style || "default") in styles && !mapId) {
  mapStyle = styles[style || "default"];
}

const apiKey =
  bookshop || import.meta.env.DEV
    ? "AIzaSyDkEYLtJmsfG9MU90-y4Y-JUi0KLJNG3OU"
    : preferences.API.google_maps.api_key;
// const height = Astro.props.height + "vh";
const mapType = Astro.props.mapType ?? "hybrid";
const id = "map-" + key;
---

<Section component="map" {...Astro.props}>
  {
    mapStyle && (
      <script
        id={`map-style-${key}`}
        class="map-style"
        set:html={JSON.stringify(mapStyle)}
        type="application/json"
      />
    )
  }
  <div
    class="map-box"
    data-map={id}
    data-lat={lat}
    data-lng={lng}
    data-zoom={zoom}
    data-marker={marker}
    data-map-type={mapType}
    data-api-key={apiKey}
    data-map-id={mapId}
  >
  </div>
</Section>

<script>
  // import { Loader } from "@googlemaps/js-api-loader";

  document.addEventListener("DOMContentLoaded", setupMaps);
  document.addEventListener("astro:after-swap", setupMaps);

  async function setupMaps() {
    const maps = document.querySelectorAll<HTMLElement>("[data-map]");
    if (!maps.length) return;

    const apiKey = maps[0].dataset.apiKey;
    if (!apiKey) return console.warn("Map missing API Key", maps[0]);

    if ("google" in window && google?.maps != undefined) {
      console.debug(
        "[map.astro] Initialising map with existing Google Maps JS API"
      );
    } else {
      console.debug(
        "[map.astro] Loading new Google Maps JS API to initialise map"
      );

      await import("@googlemaps/js-api-loader").then(async ({ Loader }) => {
        const loader = new Loader({
          apiKey,
          version: "weekly",
        });

        await loader.importLibrary("maps");
        await loader.importLibrary("marker");
      });
    }

    maps.forEach(initMap);
  }

  async function initMap(mapElement: MapElement) {
    // const { Map } = (await google.maps.importLibrary(
    //   "maps"
    // )) as google.maps.MapsLibrary;
    // const { Marker } = (await google.maps.importLibrary(
    //   "marker"
    // )) as google.maps.MarkerLibrary;

    const Map = google.maps.Map;
    const Marker = google.maps.Marker;

    const styleEl = mapElement.parentElement?.querySelector(
      ":scope > script.map-style"
    );
    const styles = styleEl?.innerHTML
      ? JSON.parse(styleEl?.innerHTML)?.styles
      : undefined;

    const position = {
      lat: Number(mapElement.dataset?.lat),
      lng: Number(mapElement.dataset?.lng),
    };

    const mapOptions: google.maps.MapOptions = {
      center: position,
      zoom: Number(mapElement.dataset?.zoom),
      mapTypeId: mapElement.dataset?.mapType,
      mapId: mapElement.dataset?.mapId,
      styles,
    };

    mapElement.map = new Map(mapElement, mapOptions);

    if ("marker" in mapElement.dataset) {
      new Marker({
        position,
        map: mapElement.map,
      });
    }
  }
</script>

<style>
  .map-box {
    min-height: 100%;
  }
</style>
