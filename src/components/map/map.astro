---
import Section from "@layouts/Section.astro";
import preferences from "@data/preferences.json";

// const styles = Object.entries(
//   await import.meta.glob("@custom/*.map.json")
// ).reduce<Record<string, any>>((i, n) => {
//   let name = n[0]
//     .split("/")
//     .at(-1)
//     ?.match(/(.*)\.map\.json$/)?.[1];
//   if (!name) return i;
//   i[name] = n[1];
//   return i;
// }, {});

const styles = {};

export interface props {
  lat: number;
  lng: number;
  zoom?: number;
  mapType?: string;
  mapId?: string;
  marker?: boolean;
  height: number;
  style?: string;
  indent?: boolean;
  key?: string;
}

const { lat, lng, zoom, marker, key, indent, mapId, style } = Astro.props;

let mapStyle;
if ((style || "default") in styles && !mapId) {
  mapStyle = await styles[style || "default"]();
}

const apiKey = preferences.API.google_maps.api_key;
const height = Astro.props.height + "vh";
const mapType = Astro.props.mapType ?? "hybrid";
const id = "map-" + key;
---

<Section component="map" {...Astro.props}>
  {
    mapStyle && (
      <script
        id={`map-style-${key}`}
        class="map-style"
        set:html={JSON.stringify(mapStyle)}
        type="application/json"
      />
    )
  }
  <div
    class="map-box"
    data-map={id}
    data-lat={lat}
    data-lng={lng}
    data-zoom={zoom}
    data-marker={marker}
    data-map-type={mapType}
    data-api-key={apiKey}
    data-map-id={mapId}
  >
  </div>
</Section>

<script>
  import { Loader } from "@googlemaps/js-api-loader";
  // import { styles } from "@custom/map.json";

  document.addEventListener("DOMContentLoaded", setupMaps);
  document.addEventListener("astro:after-swap", setupMaps);

  function setupMaps() {
    const maps = document.querySelectorAll("[data-map]");

    maps.forEach((mapElement) => {
      if (!(mapElement instanceof HTMLElement)) return;
      const apiKey = mapElement.dataset.apiKey;

      if (!apiKey) return console.warn("Map missing API Key", mapElement);

      const styleEl = mapElement.parentElement?.querySelector(
        ":scope > script.map-style"
      );
      const { styles } = JSON.parse(styleEl?.innerHTML || "{}");

      const loader = new Loader({
        apiKey,
        version: "weekly",
      });

      loader.load().then(async () => {
        const { Map } = (await google.maps.importLibrary(
          "maps"
        )) as google.maps.MapsLibrary;
        const { Marker } = (await google.maps.importLibrary(
          "marker"
        )) as google.maps.MarkerLibrary;

        const position = {
          lat: Number(mapElement.dataset?.lat),
          lng: Number(mapElement.dataset?.lng),
        };

        const map = new Map(mapElement, {
          center: position,
          zoom: Number(mapElement.dataset?.zoom),
          mapTypeId: mapElement.dataset?.mapType,
          styles,
          mapId: mapElement.dataset?.mapId,
        });

        if ("marker" in mapElement.dataset) {
          new Marker({
            position,
            map,
          });
        }

        // (mapElement as MapElement).map = map;
      });
    });
  }
</script>

<style>
  .map-box {
    min-height: 100%;
  }
</style>
