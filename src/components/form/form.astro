---
import { convertColorString } from "@mws-astro/util";
import Required from "./required.astro";


export interface Props {
  action: string;
  name: string;
  form_blocks: any[];
  background_color?: string;
  classes?: any;
  key?: string;
}

const { action, name, form_blocks, background_color, classes, key } =
  Astro.props;
const id = (name || "") + "-" + (key || "");

const components: Record<string, any> = {};
const componentImports = import.meta.glob(
  ["/src/mws-astro/src/components/form/**/*.jsx", "/src/mws-astro/src/components/form/**/*.astro"],
  {
    eager: true,
  }
);

Object.entries(componentImports).forEach(([path, obj]: [string, any]) => {
  const parts = path
    .replace(/^.*components\//, "")
    .split(".")[0]
    .split("/");
  if (parts.length > 1 && parts[parts.length - 1] === parts[parts.length - 2]) {
    parts.pop();
  }
  const bookshopName = parts.join("/");
  components[bookshopName] = obj.default;
});

// function getNested(obj, ...args) {
//   return args.reduce((obj, level) => obj && obj[level], obj)
// }

// Recurse form_blocks to check for any required fields. 
function checkRequired(obj: any[]): boolean {
  return obj.some((element: any) => {
    if ("form_blocks" in element) return checkRequired(element.form_blocks);
    return element?.required;
  });
}
const required = checkRequired(form_blocks);

const background = convertColorString(background_color);
---

<section
  style={{...(background && { "--background-color": background })}}
  class:list={["form", classes]}
>
  <form method="post" {action} {name} {id}>
    {required && <p>Fields marked with an asterisk (<Required />) are required.</p>}
    {
      form_blocks.map((block: any, i: number) => {
        const Component = components[block._bookshop_name];
        if (Component) {
          return <Component {...block} key={String(i) + (key || "")} />;
        }
        const warnstring = `[${Astro.self.name}] Component ${block._bookshop_name} could not be found!`;
        console.warn(warnstring);
        return (
          <div class="missing-component">
            {warnstring}
          </div>
        );
      })
    }
    <input type="hidden" name="_gotcha" />
    <input type="submit" value="Submit" />
  </form>
</section>

<style>
  .form form {
    display: flex;
    flex-direction: column;
    gap: var(--text-gap);
  }

  input[type="submit"] {
    cursor: pointer;
    width: 100%;
    background-color: rgb(var(--background-color));
    border-radius: var(--border-radius);
    transition: background-color 0.2s ease-in-out;
  }

  input[type="submit"]:hover {
    background-color: rgb(var(--text-color) / 0.2);
  }
</style>

<style is:global>
  input::placeholder, textarea::placeholder {
    color: rgb(var(--placeholder-color));
  }
</style>