---
import { bookshopName } from "@mws-astro/util";
import Section from "@layouts/Section.astro";
import Required from "./required.astro";

export interface Props {
  action: string;
  name: string;
  form_blocks: any[];
  classes?: any;
  key?: string;
}

const { action, name, form_blocks, classes, key } = Astro.props;
const id = (name || "") + "-" + (key || "");

const components: Record<string, any> = {};
const componentImports = import.meta.glob(
  ["/src/mws-astro/src/components/form/**/*.astro"],
  {
    eager: true,
  }
);

const componentOverrides = import.meta.glob(
  ["/src/components/form/**/*.astro"],
  {
    eager: true,
  }
);

Object.entries(componentImports).forEach(
  ([path, obj]: [string, any]) => (components[bookshopName(path)] = obj.default)
);

Object.entries(componentOverrides).forEach(
  ([path, obj]: [string, any]) => (components[bookshopName(path)] = obj.default)
);

// Recurse form_blocks to check for any required fields.
function checkRequired(obj: any[]): boolean {
  return obj.some((element: any) => {
    if ("form_blocks" in element) return checkRequired(element.form_blocks);
    return element?.required;
  });
}
const required = checkRequired(form_blocks);
---

<Section component="form" class:list={["form", classes]} {...Astro.props}>
  <form
    method="post"
    {action}
    {name}
    {id}
    enctype="application/x-www-form-urlencoded"
  >
    {
      required && (
        <p>
          Fields marked with an asterisk (<Required />) are required.
        </p>
      )
    }
    {
      form_blocks.map((block: any, i: number) => {
        const Component = components[block._bookshop_name];
        if (Component) {
          return <Component {...block} key={String(i) + (key || "")} />;
        }
        const warnstring = `[${Astro.self.name}] Component ${block._bookshop_name} could not be found!`;
        console.warn(warnstring);
        return <div class="missing-component">{warnstring}</div>;
      })
    }
    <input type="hidden" name="_gotcha" />
    <input type="submit" value="Submit" />
  </form>
</Section>

<style>
  form {
    display: flex;
    flex-direction: column;
    gap: var(--text-gap);

    --placeholder-color: var(--text-color) / 0.5;
    --form-border: 1px solid rgb(var(--text-color) / 0.6);
    --form-background: var(--text-color) / 0.05;
  }

  input[type="submit"] {
    cursor: pointer;
    width: 100%;
    background-color: rgb(var(--background-color));
    border-radius: var(--border-radius);
    transition: background-color 0.2s ease-in-out;
  }

  input[type="submit"]:hover {
    background-color: rgb(var(--text-color) / 0.2);
  }
</style>

<style is:global>
  input::placeholder,
  textarea::placeholder {
    color: rgb(var(--placeholder-color));
  }
</style>
